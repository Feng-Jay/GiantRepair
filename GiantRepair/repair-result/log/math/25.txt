Repair : math_25
Current failed test : org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844 | 2019.09.05 AD at 07:08:22 CDT
Location : org.apache.commons.math3.optimization.fitting.HarmonicFitter.guessAOmega:[326, 327, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 279, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292, 293, 297, 298, 299, 300, 329]#0.5
Compute Candidate : 2019.09.05 AD at 07:10:10 CDT - 2019.09.05 AD at 08:23:32 CDT , PNumber : 11438, CandNumber : 978 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+return ;
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+return ;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+return ;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
-double sy2=0;
+ double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
-double sxy=0;
+ double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
-double sxz=0;
+ double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
-double syz=0;
+ double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-double f2Integral=0;
+ double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
- final double startX=currentX;
+ double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
-double fPrime2Integral=0;
+ double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)&&(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=1;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=1;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;a<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1;a<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;omega<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1;omega<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;currentX<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;currentY<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-1;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
- final double dy=currentY-previousY;
+ final double dy=currentY-1;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
- final double x=currentX-startX;
+ final double x=currentX-1;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=0;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=0;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<=0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/c3<=0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<=observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentX=observations[i].getX();
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY=observations[i].getY();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+f2Integral+=f2StepIntegral;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+fPrime2Integral+=fPrime2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Collection;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,myUid;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,DEFAULT_TIMEOUT2;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt((c1)/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt((c2)/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if(((c1)/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||((c2)/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2>0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/c3>0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i>observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,MAX_SERVICE_NODES;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,MAX_ZK_WAIT_RETRY_TIMES;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(sx2-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(sy2-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(sxy-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(sxz-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(currentY-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(syz-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(currentX-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(f2Integral-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(fPrime2Integral-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=2;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=2;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=3;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=3;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)-3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx-(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY-previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY-currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(sx2==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(sy2==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(sxy==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(sxz==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(syz==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(currentX==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(currentY==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(f2Integral==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(fPrime2Integral==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(startX==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[0].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[0].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<4)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/c3<4)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<4;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/1;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=observations[1].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[1].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[1].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[1].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=observations[0].getY();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getY();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-2;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
- final double dy=currentY-previousY;
+ final double dy=currentY-2;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
- final double x=currentX-startX;
+ final double x=currentX-2;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,a;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1,a;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,localLevel;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=2*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(2*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+2*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+2*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=2*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0.5*(startX-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/3851/pattern-ver1-serial/src.main.java.com.sandagerdi.Operation.java-substraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=10;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=10;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=observations[2].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[2].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[2].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[2].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-a;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-omega;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-sx2;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-sy2;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-sxy;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-currentX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-currentY;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-sxz;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-syz;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-fPrime2Integral;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(1.0/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(1.0/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((1.0/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(1.0/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++i,new ArrayList<KeyBinding>()){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/4);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/4);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/4;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy*dy/4;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/4<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/4<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=100;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=100;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<5;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<5)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/c3<5)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/2.0);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/2.0);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/2.0;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy*dy/2.0;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/2.0<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Set;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/2.0<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=0.0;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=0.0;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double dx=currentX-previousX;
+ final double dx=currentX-4;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
- final double dy=currentY-previousY;
+ final double dy=currentY-4;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
- final double x=currentX-startX;
+ final double x=currentX-4;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=a*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=a*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=a*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=sy2*sxz-a*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=a*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=sxy*sxz-a*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=a*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=sx2*sy2-a*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=a*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(a*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=4;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=4;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=5;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=5;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(a==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(omega==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/2);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/2;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy*dy/2;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+int sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
-double sy2=0;
+int sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
-double sxy=0;
+int sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
-double sxz=0;
+int sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
-double syz=0;
+int syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-double f2Integral=0;
+int f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
-double fPrime2Integral=0;
+int fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,_afterComposeMethodCache;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+float sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
-double sy2=0;
+float sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
-double sxy=0;
+float sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
-double sxz=0;
+float sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
-double fPrime2Integral=0;
+float fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
-double syz=0;
+float syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-double f2Integral=0;
+float f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.List;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,mActions;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=a;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=omega;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=sx2;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=sy2;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=sxy;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=sxz;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=currentX;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=currentY;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=syz;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=f2Integral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++a){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++sx2){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++sy2){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++sxy){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++omega){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++sxz){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++syz){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++f2Integral){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:50:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++fPrime2Integral){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[0].getX();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2191/pattern-ver1-serial/AndroidMainApp.main.src.net.thiagoalz.hermeto.panel.GameManager.java-startPlayingGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getX();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2191/pattern-ver1-serial/AndroidMainApp.main.src.net.thiagoalz.hermeto.panel.GameManager.java-startPlayingGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,mRelationId;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
+a=FastMath.sqrt(c1/c2);
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+omega=FastMath.sqrt(c2/c3);
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/currentX);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/currentY);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/sx2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/sy2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/sxy);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/sxz);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/syz);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/f2Integral);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/fPrime2Integral);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/322/pattern-ver1-serial/src.ca.ipredict.predictor.CPT.LossLessCompactPredictor.java-UpdateCountTable.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=5*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(5*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+5*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+5*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=5*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy*4/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/184/pattern-ver1-serial/src.main.java.nl.han.ica.ShootEmOut.ShootEmOut.java-monsterSpawner.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*4+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/184/pattern-ver1-serial/src.main.java.nl.han.ica.ShootEmOut.ShootEmOut.java-monsterSpawner.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*4+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/184/pattern-ver1-serial/src.main.java.nl.han.ica.ShootEmOut.ShootEmOut.java-monsterSpawner.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*4)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/184/pattern-ver1-serial/src.main.java.nl.han.ica.ShootEmOut.ShootEmOut.java-monsterSpawner.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<a){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<omega){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<sx2){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<sy2){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<currentX){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<currentY){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<startX){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3192/pattern-ver1-serial/src.main.java.matcha.UsefulTickData.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=-1;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=-1;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
-double sy2=0;
+ double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
-double sxy=0;
+ double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
-double sxz=0;
+ double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
- final double xRange=observations[last].getX()-observations[0].getX();
+ double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
-double syz=0;
-double currentX=observations[0].getX();
+ double syz=0;
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-double f2Integral=0;
+ double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
-double fPrime2Integral=0;
+ double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
- final int last=observations.length-1;
+ int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=this.observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=this.observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=this.observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=this.observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+this.guessAOmega();
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+this.guessAOmega();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+this.guessAOmega();
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
+this.guessAOmega();
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
+sx2++;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+sy2++;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+sxy++;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+sxz++;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
+syz++;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+i++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentX++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+currentX++;
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+i++;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX++;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY++;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+sx2++;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+sx2++;
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+sx2++;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+sx2++;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+sx2++;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+sx2++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+sy2++;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+i--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentX--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentY--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<=observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<=yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<=observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<=observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+sx2--;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+sx2--;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+sx2--;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+sx2--;
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+sy2--;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+sx2--;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+sx2--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
+sx2--;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+synchronized(this){
 f2Integral+=f2StepIntegral;
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+synchronized(this){
 fPrime2Integral+=fPrime2StepIntegral;
+}
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i++].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i++].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+synchronized(this){
 a=FastMath.sqrt(c1/c2);
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+synchronized(this){
 omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+synchronized(this){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+synchronized(this){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+synchronized(this){
 omega=2*Math.PI/xRange;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
+synchronized(this){
 a=0.5*(yMax-yMin);
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<1)||(c2/c3<1)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<1;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<1;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/(int)(3);
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+i++;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentX++;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentY++;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/2.0<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/2.0);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/6277/pattern-ver1-serial/KasslR.app.src.main.java.gruppn.kasslr.game.LaneGame.java-drawOverlay.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/2.0<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/2.0);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/6277/pattern-ver1-serial/KasslR.app.src.main.java.gruppn.kasslr.game.LaneGame.java-drawOverlay.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/-1;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+synchronized(this){
 sx2+=x*x;
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+synchronized(this){
 sxy+=x*f2Integral;
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+synchronized(this){
 sy2+=f2Integral*f2Integral;
+}
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/(int)c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/(int)c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/(int)c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 08:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/(int)c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy*dy/(int)dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/(int)3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1,continentName,countryCode;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(equals(c1)){
+return ;
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(equals(c2)){
+return ;
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+if(equals(c1)){
+return ;
+}
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+if(equals(c2)){
+return ;
+}
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+if(equals(c2)){
+return ;
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+if(equals(c3)){
+return ;
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=observations[0].getY();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
- final double xRange=observations[last].getX()-observations[0].getX();
+ final double xRange=observations[last].getX()-observations[0].getY();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4188/pattern-ver1-serial/extras.edu.umd.cs.piccolox.util.LineShape.java-intersects.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+while(true){
+
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+synchronized(this){
 if(xRange==0){
 throw new ZeroException();
+}
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+synchronized(this){
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++i,Charset.forName("UTF-8")){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentY==currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(startX==currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(i==currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(previousX==currentX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(previousY==currentX){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if(dx==currentX){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(dy==currentX){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if(f2StepIntegral==currentX){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
+if(fPrime2StepIntegral==currentX){
+return ;
+}
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(x==currentX){
+return ;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX==currentY){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX==startX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX==i){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(currentX==previousX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentX==previousY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if(currentX==dx){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(currentX==dy){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if(currentX==f2StepIntegral){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
+if(currentX==fPrime2StepIntegral){
+return ;
+}
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(currentX==x){
+return ;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(previousY==currentY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if(previousX==currentX){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if(previousY==currentY){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if(previousX==currentX){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(previousX==currentX){
+return ;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if(previousY==currentY){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(previousY==currentY){
+return ;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(previousX==currentX){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(previousX==currentX){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(previousY==currentY){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=1;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=1;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=1;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=1;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=1;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=1;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=-1;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=-1;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=-1;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=-1;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=sy2*sxz-1;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=sxy*sxz-1;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=sx2*sy2-1;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=0;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=0;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=0;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=0;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(FastMath.sqrt(c1/c2)!=0){
 a=FastMath.sqrt(c1/c2);
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+if(FastMath.sqrt(c2/c3)!=0){
 omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i].getX()!=0){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i].getY()!=0){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
+if(0.5*(yMax-yMin)!=0){
 a=0.5*(yMax-yMin);
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+if(2*Math.PI/xRange!=0){
 omega=2*Math.PI/xRange;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if("index".equals(currentX)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if("index".equals(currentY)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if("index".equals(startX)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if("index".equals(i)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("index".equals(previousX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if("index".equals(previousY)){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if("index".equals(dx)){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if("index".equals(dy)){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if("index".equals(f2StepIntegral)){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
+if("index".equals(fPrime2StepIntegral)){
+return ;
+}
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
+if("&null".equals(sx2)){
+return ;
+}
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+if("&null".equals(sy2)){
+return ;
+}
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+if("&null".equals(sxy)){
+return ;
+}
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(currentX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(currentY)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(startX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(i)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(previousX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if("&null".equals(previousY)){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if("&null".equals(dx)){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=(dy*dy)/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]==null){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]==null){
+return ;
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=0;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i-1].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i-1].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
- final double xRange=observations[last].getX()-observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
- final int last=observations.length-1;
+ @SuppressWarnings("UnusedAssignment") int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ @SuppressWarnings("UnusedAssignment") double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
-double sy2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
-double sxy=0;
+ @SuppressWarnings("UnusedAssignment") double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
-double sxz=0;
+ @SuppressWarnings("UnusedAssignment") double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
-double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double syz=0;
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-double f2Integral=0;
+ @SuppressWarnings("UnusedAssignment") double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
-double sx2=0;
+ @SuppressWarnings("UnusedAssignment") double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
-double fPrime2Integral=0;
+ @SuppressWarnings("UnusedAssignment") double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=2;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=2;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=2;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=2;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=2;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=2;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+currentX=sx2;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+currentY=sx2;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=3;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=3;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=3;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=3;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=3;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=3;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx+1*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+1+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+i=i;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX=currentX;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY=currentY;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+sx2==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+sy2==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+sxy==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+sxz==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+syz==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+currentX==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+currentY==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+f2Integral==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+fPrime2Integral==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange+startX==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=i;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=i;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=x;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+1+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+1)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+3+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+3)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=sy2*sxz-2;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=sxy*sxz-2;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=sx2*sy2-2;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(c1<0){
+return ;
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(c2<0){
+return ;
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+if(c1<0){
+return ;
+}
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+if(c2<0){
+return ;
+}
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=2/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=10;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=10;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=10;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=10;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=10;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=10;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+int a=0;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=x;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=f2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=1.0/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=2;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(f2StepIntegral==0.0){
+continue;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+if(x==0.0){
+continue;
+}
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+if(x==0.0){
+continue;
+}
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+if(x==0.0){
+continue;
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+if(fPrime2StepIntegral==0.0){
+continue;
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+if(f2Integral==0.0){
+continue;
+}
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+if(f2Integral==0.0){
+continue;
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+String OUTSTRING="";
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+String OUTSTRING="";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+String OUTSTRING="";
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
+String OUTSTRING="";
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=100;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=100;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=100;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=100;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=100;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=100;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt((int)(c1/c2));
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt((int)(c2/c3));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+int observations=5;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0.0;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0.0;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=0.0;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=0.0;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=0.0;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=0.0;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=sy2*sxz-4;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=sxy*sxz-4;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=sx2*sy2-4;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4905/pattern-ver1-serial/app_android.src.com.projectkaiser.app_android.MainActivity.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=4;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=4;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=4;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=4;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=4;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=4;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=5;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=5;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=5;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=5;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=5;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=5;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+(int)(currentY*currentY))/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+(int)(previousY*currentY)+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<=0){
+return ;
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<=0){
+return ;
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentX<=0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentY<=0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+if(f2Integral<=0){
+return ;
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+if(fPrime2Integral<=0){
+return ;
+}
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(f2Integral<=0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(fPrime2Integral<=0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=sxy*sxz-1.0*sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=1.0*sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=1.0*sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
-double c1=sy2*sxz-sxy*syz;
+double c1=sy2*sxz-1.0*sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
-double c2=sxy*sxz-sx2*syz;
+double c2=1.0*sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
-double c3=sx2*sy2-sxy*sxy;
+double c3=sx2*sy2-1.0*sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+1.0*previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(1.0*previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=1.0*dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=1.0*x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+-1+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+-1)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(Math.abs(c1/c2));
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(Math.abs(c2/c3));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;Math.abs(++i)){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+if(a==0){
+return ;
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+}
+if(a==0){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(omega==0){
+return ;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+}
+if(omega==0){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX==0){
+return ;
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY==0){
+return ;
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentX==0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentY==0){
+return ;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+if(a==0){
+return ;
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+if(omega==0){
+return ;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+int indexSelection=0;
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+int indexSelection=0;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+int indexSelection=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Arrays;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
+double currentX=observations[0-1].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Arrays;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[0-1].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
-yMin=y;
+yMin=0;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
-yMax=y;
+yMax=0;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=0;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=0;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+sx2+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+sy2+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+sxy+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+sxz+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+syz+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+currentX+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+f2Integral+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+fPrime2Integral+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+startX+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=sx2+x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=sy2+f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=currentX+observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=currentY+observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=sxy+x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=sxz+x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=syz+f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=f2Integral+f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=fPrime2Integral+fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=(f2StepIntegral/1000);
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=(x*x/1000);
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=(fPrime2StepIntegral/1000);
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=(f2Integral*f2Integral/1000);
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=(x*f2Integral/1000);
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=(x*fPrime2Integral/1000);
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=(f2Integral*fPrime2Integral/1000);
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=(observations[i].getX()/1000);
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+int a=1;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+String length="%#.&f";
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+boolean observations=true;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+boolean b=true;
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:16:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+boolean b=true;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+boolean b=true;
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
+boolean b=true;
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()+1;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getY()+1;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i&0xff].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i&0xff].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=5/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+yMin=y;
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+yMax=y;
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
+yMin=y;
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
+yMax=y;
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+if(xRange==12){
+return ;
+}else {
 if(xRange==0){
 throw new ZeroException();
+}
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
- final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+ final double startX=currentX;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=observations[i++].getX();
+currentY=observations[i++].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i++].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
- final double y=observations[i].getY();
+ final double y=observations[i++].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i++].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
- final double y=observations[i].getY();
+ final double y=observations[i++].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+f2Integral+=f2StepIntegral;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<-1)||(c2/c3<-1)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<-1;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<-1;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
+assert (sx2!=0);
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+assert (sy2!=0);
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+assert (sxy!=0);
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+assert (previousX!=currentX);
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+assert (previousY!=currentY);
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+assert (dx!=currentX-previousX);
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+assert (dy!=currentY-previousY);
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+assert (x!=currentX-startX);
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
+assert (fPrime2StepIntegral!=dy*dy/dx);
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+assert (f2StepIntegral!=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3);
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+ final double previousX=currentX;
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
- final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+double yMax=Double.NEGATIVE_INFINITY;
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
-double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(Math.max(c1/c2,0));
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(Math.max(c2/c3,0));
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;Math.max(++i,0)){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=1;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=-1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=-1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=0;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=2;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=3;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=3;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=c1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=c2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=c2;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=c3;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=(FastMath.sqrt(c1/c2)+c1)%c1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=(FastMath.sqrt(c1/c2)+c2)%c2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=(FastMath.sqrt(c2/c3)+c2)%c2;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=(FastMath.sqrt(c2/c3)+c3)%c3;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=(observations[i].getX()+i)%i;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=(observations[i].getY()+i)%i;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=(f2StepIntegral+f2StepIntegral)%f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=(f2Integral*f2Integral+f2Integral)%f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=(x*f2Integral+f2Integral)%f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=(x*fPrime2Integral+fPrime2Integral)%fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*sx2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*sy2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*sxy;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*sxz;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*syz;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*currentX;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*currentY;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*f2Integral;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=sx2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=sy2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=sxy;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=sxz;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=syz;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=currentX;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=currentY;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=f2Integral;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=fPrime2Integral;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=startX;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=f2StepIntegral<0?0:f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=fPrime2StepIntegral<0?0:fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=10;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=10;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=100;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=100;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=0.0;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=0.0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=4;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=4;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=5;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=5;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
+assert (sx2>=0):"Receive a negative tratment";
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+assert (sy2>=0):"Receive a negative tratment";
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+assert (sxy>=0):"Receive a negative tratment";
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+assert (sxz>=0):"Receive a negative tratment";
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
+assert (syz>=0):"Receive a negative tratment";
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (currentX>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+assert (currentX>=0):"Receive a negative tratment";
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (currentY>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+assert (currentY>=0):"Receive a negative tratment";
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (startX>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+yMin=y;
 yMin=y;
 }
+yMin=y;
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+yMin=y;
 if(y>yMax){
 yMax=y;
+yMin=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+yMax=y;
 }
+yMax=y;
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+yMax=y;
 if(y>yMax){
+yMax=y;
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
+currentX++;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
+currentY++;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+currentX++;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+currentY++;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=(FastMath.sqrt(c1/c2)/1000);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=(FastMath.sqrt(c2/c3)/1000);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
+assert (sx2!=0):"Receive a size tratment";
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+assert (sy2!=0):"Receive a size tratment";
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
+assert (sxy!=0):"Receive a size tratment";
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+assert (sxz!=0):"Receive a size tratment";
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
+assert (syz!=0):"Receive a size tratment";
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (currentX!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+assert (currentX!=0):"Receive a size tratment";
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (currentY!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+assert (currentY!=0):"Receive a size tratment";
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+assert (startX!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)+1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=FastMath.sqrt(c2/c3)+1;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+if(xRange==0){
+throw new ZeroException();
+}
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3277/pattern-ver1-serial/core.src.main.java.org.infinispan.transaction.WriteSkewHelper.java-updateLocalModeCacheEntries.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+if(last>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+}
 }
+if(yMin>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+}
 }
+if(yMax>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
+}
+if(xRange>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+currentX=observations[i].getX();
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+currentX=observations[i].getX();
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
- final double fPrime2StepIntegral=dy*dy/dx;
+ final double fPrime2StepIntegral=dy/dy*dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+currentX=observations[i].getX();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+currentY=observations[i].getY();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+if(a<0){
+a=0;
+}
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+}
+if(a<0){
+a=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(omega<0){
+omega=0;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+}
+if(omega<0){
+omega=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX=0;
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY=0;
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentX<0){
+currentX=0;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(currentY<0){
+currentY=0;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+if(a<0){
+a=0;
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+}
 }
+if(yMin<0){
+yMin=0;
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
+if(currentX>=currentY){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
+if(currentX>=startX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
+if(currentX>=i){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
+if(currentX>=previousX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentX>=previousY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:24:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
+if(currentX>=dx){
+return ;
+}
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(currentX>=dy){
+return ;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+if(currentX>=f2StepIntegral){
+return ;
+}
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
+if(currentX>=fPrime2StepIntegral){
+return ;
+}
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(currentX>=x){
+return ;
+}
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]!=null){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(currentY<=0){
+currentY=1;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentX=observations[i].getX();
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentY=observations[i].getY();
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(currentY>dx){
+currentY=dx;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
+if(currentY>previousY){
+currentY=previousY;
+}
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+boolean haveBreadCrumbs=false;
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentY=observations[i].getY();
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+double currentY=observations[0].getY();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+try{
 currentY=observations[i].getY();
+}finally{
+currentX=observations[i].getX();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+try{
 currentX=observations[i].getX();
+}finally{
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+try{
 sx2+=x*x;
+}finally{
+currentX=observations[i].getX();
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+try{
 sx2+=x*x;
+}finally{
+currentY=observations[i].getY();
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+try{
 f2Integral+=f2StepIntegral;
+}finally{
+currentX=observations[i].getX();
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+try{
 sxy+=x*f2Integral;
+}finally{
+currentX=observations[i].getX();
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+try{
 f2Integral+=f2StepIntegral;
+}finally{
+currentY=observations[i].getY();
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+try{
 sxy+=x*f2Integral;
+}finally{
+currentY=observations[i].getY();
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+sxy+=x*f2Integral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
+ final int last=observations.length-1;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
- final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
-double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentX=this.observations[0].getX();
+double currentY=this.observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
- final double xRange=observations[last].getX()-observations[0].getX();
+ final double xRange=observations[last].getX()-this.observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/6989/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.Axis.java-getComponent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=this.observations[i].getX();
+currentY=this.observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
- final double y=observations[i].getY();
+ final double y=this.observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/6989/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.Axis.java-getComponent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+sy2+=f2Integral*f2Integral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+sxz+=x*fPrime2Integral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
+syz+=f2Integral*fPrime2Integral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+syz+=f2Integral*fPrime2Integral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
+sy2+=f2Integral*f2Integral;
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
+syz+=f2Integral*fPrime2Integral;
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+sy2+=f2Integral*f2Integral;
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=observations[i-1].getX();
+currentY=observations[i-1].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/6266/pattern-ver1-serial/src.uz.unicon.clg.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
+ final int last=observations.length-1;
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
- final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=Math.pow(10.0,f2StepIntegral/20.0);
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=Math.pow(10.0,fPrime2StepIntegral/20.0);
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+if(sy2<=0){
+sy2=f2Integral;
+}
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+if(sxy<=0){
+sxy=f2Integral;
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
+if(sxz<=0){
+sxz=fPrime2Integral;
+}
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+if(syz<=0){
+syz=f2Integral;
+}
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+if(syz<=0){
+syz=fPrime2Integral;
+}
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(sy2<=0){
+sy2=f2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(sxy<=0){
+sxy=f2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(syz<=0){
+syz=f2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(sxz<=0){
+sxz=fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+}
+if(syz<=0){
+syz=fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+currentX=observations[i].getX();
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5672/pattern-ver1-serial/core.src.com.overwatch2d.game.GameScreen.java-beginContact.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+currentX=observations[i].getX();
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5672/pattern-ver1-serial/core.src.com.overwatch2d.game.GameScreen.java-beginContact.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+if((c1/c2<0)||(c2/c3<0)){
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4876/pattern-ver1-serial/app.src.main.java.com.ps.physicssimulator.ContentActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+if(y>yMax){
+yMax=y;
+}
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+1+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
+a=0;
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
-omega=2*Math.PI/xRange;
+omega=0;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+this.a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+this.a=FastMath.sqrt(c1/c2);
+omega=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+a=0;
+this.omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+a++;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=-1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+a++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=-1;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+omega++;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=-1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+omega++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+omega=-1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+if(y<yMin){
+yMin=y;
+}
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+a=FastMath.sqrt(c1/c2);
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
+a=FastMath.sqrt(c1/c2);
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
+a=FastMath.sqrt(c1/c2);
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+a=FastMath.sqrt(c1/c2);
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+omega=FastMath.sqrt(c2/c3);
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
+omega=FastMath.sqrt(c2/c3);
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
+omega=FastMath.sqrt(c2/c3);
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+omega=FastMath.sqrt(c2/c3);
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+a=FastMath.sqrt(c1/c2);
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+a=FastMath.sqrt(c1/c2);
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+a=FastMath.sqrt(c1/c2);
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+a=FastMath.sqrt(c1/c2);
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+omega=FastMath.sqrt(c2/c3);
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+omega=FastMath.sqrt(c2/c3);
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+omega=FastMath.sqrt(c2/c3);
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+omega=FastMath.sqrt(c2/c3);
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+a=FastMath.sqrt(c1/c2);
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+a=FastMath.sqrt(c1/c2);
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+a=FastMath.sqrt(c1/c2);
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
+a=FastMath.sqrt(c1/c2);
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+a=FastMath.sqrt(c1/c2);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+a=FastMath.sqrt(c1/c2);
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+omega=FastMath.sqrt(c2/c3);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+omega=FastMath.sqrt(c2/c3);
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
+a=FastMath.sqrt(c1/c2);
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
+omega=FastMath.sqrt(c2/c3);
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
+a=FastMath.sqrt(c1/c2);
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
+omega=FastMath.sqrt(c2/c3);
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+if(currentX!=observations[i].getX()){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentY!=observations[i].getY()){
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+if(currentX!=observations[i].getX()){
 sx2+=x*x;
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
+if(currentY!=observations[i].getY()){
 sx2+=x*x;
+}
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(currentX!=observations[i].getX()){
 f2Integral+=f2StepIntegral;
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+if(currentX!=observations[i].getX()){
 sxy+=x*f2Integral;
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
+if(currentY!=observations[i].getY()){
 f2Integral+=f2StepIntegral;
+}
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+if(currentY!=observations[i].getY()){
 sxy+=x*f2Integral;
+}
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+a=0.5*(yMax-yMin);
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+a=0.5*(yMax-yMin);
 }
 }
-a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+a=0.5*(yMax-yMin);
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
-a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
-omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+omega=2*Math.PI/xRange;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
-omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+omega=2*Math.PI/xRange;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+if(observations[i]!=null){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]!=null){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]!=null){
 currentY=observations[i].getY();
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
+a=FastMath.sqrt(c1/c2);
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
+omega=FastMath.sqrt(c2/c3);
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+a=FastMath.sqrt(c1/c2);
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
+a=FastMath.sqrt(c1/c2);
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+if(currentX!=observations[i].getX()){
 sy2+=f2Integral*f2Integral;
+}
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+if(currentX!=observations[i].getX()){
 sxz+=x*fPrime2Integral;
+}
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+a=FastMath.sqrt(c1/c2);
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+a=FastMath.sqrt(c1/c2);
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+omega=FastMath.sqrt(c2/c3);
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+omega=FastMath.sqrt(c2/c3);
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+omega=FastMath.sqrt(c2/c3);
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
+omega=FastMath.sqrt(c2/c3);
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+a=FastMath.sqrt(c1/c2);
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+omega=FastMath.sqrt(c2/c3);
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+a=FastMath.sqrt(c1/c2);
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+a=FastMath.sqrt(c1/c2);
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+omega=FastMath.sqrt(c2/c3);
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+omega=FastMath.sqrt(c2/c3);
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
-f2Integral+=f2StepIntegral;
+f2Integral+=f2StepIntegral*2;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
-fPrime2Integral+=fPrime2StepIntegral;
+fPrime2Integral+=fPrime2StepIntegral*2;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
-sx2+=x*x;
+sx2+=x*x*2;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
-sxy+=x*f2Integral;
+sxy+=x*f2Integral*2;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
-sy2+=f2Integral*f2Integral;
+sy2+=f2Integral*f2Integral*2;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
-sxz+=x*fPrime2Integral;
+sxz+=x*fPrime2Integral*2;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
-syz+=f2Integral*fPrime2Integral;
+syz+=f2Integral*fPrime2Integral*2;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
-yMin=y;
+yMin=y*2;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
-yMax=y;
+yMax=y*2;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+try{
 omega=FastMath.sqrt(c2/c3);
+}finally{
+a=FastMath.sqrt(c1/c2);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+try{
 a=FastMath.sqrt(c1/c2);
+}finally{
 omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+omega=FastMath.sqrt(c2/c3);
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+omega=FastMath.sqrt(c2/c3);
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+boolean succeeded=false;
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+if(!succeeded){
+return ;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+succeeded=true;
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean succeeded=false;
 double sxy=0;
 double sxz=0;
+if(!succeeded){
+return ;
+}
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+succeeded=true;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean succeeded=false;
 double sxy=0;
 double sxz=0;
+if(!succeeded){
+return ;
+}
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+succeeded=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+boolean succeeded=false;
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+if(!succeeded){
+return ;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+succeeded=true;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+boolean succeeded=false;
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
+if(!succeeded){
+return ;
+}
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+succeeded=true;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean succeeded=false;
 double sxy=0;
 double sxz=0;
+if(!succeeded){
+return ;
+}
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+succeeded=true;
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean succeeded=false;
 double sxy=0;
 double sxz=0;
+if(!succeeded){
+return ;
+}
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
+succeeded=true;
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean succeeded=false;
 double sxy=0;
 double sxz=0;
+if(!succeeded){
+return ;
+}
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+succeeded=true;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
+a=FastMath.sqrt(c1/c2);
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
+a=FastMath.sqrt(c1/c2);
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
+a=FastMath.sqrt(c1/c2);
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
+a=FastMath.sqrt(c1/c2);
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+a=FastMath.sqrt(c1/c2);
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean haveBreadCrumbs=false;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+haveBreadCrumbs=true;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+boolean haveBreadCrumbs=false;
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+haveBreadCrumbs=true;
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean haveBreadCrumbs=false;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+haveBreadCrumbs=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+boolean haveBreadCrumbs=false;
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+haveBreadCrumbs=true;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+boolean haveBreadCrumbs=false;
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+haveBreadCrumbs=true;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean haveBreadCrumbs=false;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+haveBreadCrumbs=true;
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
+boolean haveBreadCrumbs=false;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange==0&&haveBreadCrumbs){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
+haveBreadCrumbs=true;
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+boolean haveBreadCrumbs=false;
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<yMin&&haveBreadCrumbs){
 yMin=y;
 }
+haveBreadCrumbs=true;
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
+boolean haveBreadCrumbs=false;
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
-if(y>yMax){
+haveBreadCrumbs=true;
+if(y>yMax&&haveBreadCrumbs){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+if(a!=FastMath.sqrt(c1/c2)){
 omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(omega!=FastMath.sqrt(c2/c3)){
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(sx2==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(sx2==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(sy2==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(sy2==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(sxy==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(sxy==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(sxz==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(sxz==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(syz==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(syz==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(currentX==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(currentX==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(currentY==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(currentY==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(f2Integral==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(f2Integral==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(fPrime2Integral==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(fPrime2Integral==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+if(startX==3){
+System.out.println("debug");
+}
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+if(startX==3){
+System.out.println("debug");
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
-omega=2*Math.PI/xRange;
+omega=2*Math.PI/xRange*2;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+a=FastMath.sqrt(c1/c2)*2;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX--;
+}
 currentY=observations[i].getY();
+if(currentY<0){
+currentY--;
+}
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
-omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
+if(omega!=2*Math.PI/xRange){
 a=0.5*(yMax-yMin);
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5683/pattern-ver1-serial/app.src.main.java.com.hsbsoftwares.android.app.healthdiagnostic.CameraActivity.java-discardMask.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)||(c2/c3<0)||"查看红包".equals((c1/c2<0))){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*previousY*previousY+previousY*currentY+currentY*currentY*100/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if(!(c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*1/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*3/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if(true){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*previousY*previousY+previousY*currentY+currentY*currentY*5/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(int)((previousY*previousY+previousY*currentY+currentY*currentY))/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*-1/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*previousY/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*a/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*omega/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*sx2/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*sy2/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*currentX/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if(!(c1/c2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/5657/pattern-ver1-serial/services.src.main.java.org.devgateway.geoph.services.geojson.ConverterUtil.java-merge.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*4/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/184/pattern-ver1-serial/src.main.java.nl.han.ica.ShootEmOut.ShootEmOut.java-monsterSpawner.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=(dx*(previousY*previousY+previousY*currentY+currentY*currentY))/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)+1/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=2/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=dx/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=1.0/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
+long startTime=System.currentTimeMillis();
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
+long startTime=System.currentTimeMillis();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+long startTime=System.currentTimeMillis();
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
+long startTime=System.currentTimeMillis();
 double sx2=0;
 double sy2=0;
 double sxy=0;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
+import java.util.Timer;
+
+import java.util.TimerTask;
+
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
- final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
+ final double f2StepIntegral=5/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/2305/pattern-ver1-serial/src.main.java.com.kz.pipeCutter.BBB.commands.MachinekitRunPostgui.java-runSshCmd.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
+if(xRange==0&&(c2/c3<0)){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
-if(y<yMin){
+if(y<yMin&&(c2/c3<0)){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+if((c1/c2<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
-if(y>yMax){
+if(y>yMax&&(c2/c3<0)){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
+a=FastMath.sqrt(c1/c2);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
-a=FastMath.sqrt(c1/c2);
+omega=FastMath.sqrt(c2/c3);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+a=Math.round(a*100.0)/100.0;
 omega=FastMath.sqrt(c2/c3);
+omega=Math.round(omega*100.0)/100.0;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+sx2=Math.round(sx2*100.0)/100.0;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+sxy=Math.round(sxy*100.0)/100.0;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+sx2=Math.round(sx2*100.0)/100.0;
 sy2+=f2Integral*f2Integral;
+sy2=Math.round(sy2*100.0)/100.0;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+sx2=Math.round(sx2*100.0)/100.0;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
+sxz=Math.round(sxz*100.0)/100.0;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
+sx2=Math.round(sx2*100.0)/100.0;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+syz=Math.round(syz*100.0)/100.0;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
+sy2=Math.round(sy2*100.0)/100.0;
 sxy+=x*f2Integral;
+sxy=Math.round(sxy*100.0)/100.0;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+sxy=Math.round(sxy*100.0)/100.0;
 sxz+=x*fPrime2Integral;
+sxz=Math.round(sxz*100.0)/100.0;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
+sxy=Math.round(sxy*100.0)/100.0;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
+syz=Math.round(syz*100.0)/100.0;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
-throw new ZeroException();
-}
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 3, INS : 0, DEL : 16
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+boolean annotatedActualName=false;
+if((c1/c2<0)||(c2/c3<0)&&!annotatedActualName){
  final int last=observations.length-1;
+annotatedActualName=true;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
+annotatedActualName=true;
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1153/pattern-ver1-serial/libraries.jnaerator.jnaerator.src.main.java.com.ochafik.lang.jnaerator.BridJDeclarationsConverter.java-convertFunction.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 11, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+boolean annotatedActualName=false;
+if((c1/c2<0)||(c2/c3<0)&&!annotatedActualName){
  final int last=observations.length-1;
+annotatedActualName=true;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
+annotatedActualName=true;
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1153/pattern-ver1-serial/libraries.jnaerator.jnaerator.src.main.java.com.ochafik.lang.jnaerator.BridJDeclarationsConverter.java-convertFunction.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 11, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+boolean annotatedActualName=false;
+if((c1/c2<0)||(c2/c3<0)&&!annotatedActualName){
  final int last=observations.length-1;
+annotatedActualName=true;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
+annotatedActualName=true;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1153/pattern-ver1-serial/libraries.jnaerator.jnaerator.src.main.java.com.ochafik.lang.jnaerator.BridJDeclarationsConverter.java-convertFunction.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 11, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
+boolean annotatedActualName=false;
+if((c1/c2<0)||(c2/c3<0)&&!annotatedActualName){
  final int last=observations.length-1;
+annotatedActualName=true;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
+annotatedActualName=true;
 }
 }
 a=0.5*(yMax-yMin);
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1153/pattern-ver1-serial/libraries.jnaerator.jnaerator.src.main.java.com.ochafik.lang.jnaerator.BridJDeclarationsConverter.java-convertFunction.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 11, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
 if((c1/c2<0)||(c2/c3<0)){
+synchronized(this){
  final int last=observations.length-1;
  final double xRange=observations[last].getX()-observations[0].getX();
 if(xRange==0){
 throw new ZeroException();
 }
 omega=2*Math.PI/xRange;
 double yMin=Double.POSITIVE_INFINITY;
 double yMax=Double.NEGATIVE_INFINITY;
 for(int i=1;i<observations.length;++i){
  final double y=observations[i].getY();
 if(y<yMin){
 yMin=y;
 }
 if(y>yMax){
 yMax=y;
 }
 }
 a=0.5*(yMax-yMin);
+}
 }else {
 a=FastMath.sqrt(c1/c2);
 omega=FastMath.sqrt(c2/c3);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[248,329]
------------Candidate---------------
 private void guessAOmega(){
 double sx2=0;
 double sy2=0;
 double sxy=0;
 double sxz=0;
 double syz=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 double f2Integral=0;
 double fPrime2Integral=0;
  final double startX=currentX;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double dx=currentX-previousX;
  final double dy=currentY-previousY;
  final double f2StepIntegral=dx*(previousY*previousY+previousY*currentY+currentY*currentY)/3;
  final double fPrime2StepIntegral=dy*dy/dx;
  final double x=currentX-startX;
 f2Integral+=f2StepIntegral;
 fPrime2Integral+=fPrime2StepIntegral;
 sx2+=x*x;
 sy2+=f2Integral*f2Integral;
 sxy+=x*f2Integral;
 sxz+=x*fPrime2Integral;
 syz+=f2Integral*fPrime2Integral;
 }
 double c1=sy2*sxz-sxy*syz;
 double c2=sxy*sxz-sx2*syz;
 double c3=sx2*sy2-sxy*sxy;
-if((c1/c2<0)||(c2/c3<0)){
- final int last=observations.length-1;
- final double xRange=observations[last].getX()-observations[0].getX();
-if(xRange==0){
-throw new ZeroException();
-}
-omega=2*Math.PI/xRange;
-double yMin=Double.POSITIVE_INFINITY;
-double yMax=Double.NEGATIVE_INFINITY;
-for(int i=1;i<observations.length;++i){
- final double y=observations[i].getY();
-if(y<yMin){
-yMin=y;
-}
-if(y>yMax){
-yMax=y;
-}
-}
-a=0.5*(yMax-yMin);
-}else {
-a=FastMath.sqrt(c1/c2);
-omega=FastMath.sqrt(c2/c3);
-}
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 88, UPD : 0, INS : 0, DEL : 88
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:36:44 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser:[201, 202, 195, 196]#0.4472135954999579
Compute Candidate : 2019.09.05 AD at 09:38:07 CDT - 2019.09.05 AD at 09:46:40 CDT , PNumber : 11390, CandNumber : 54 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<=4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length>4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<3){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
-this.observations=observations.clone();
+this.observations=observations;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
+synchronized(this){
 this.observations=observations.clone();
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
-this.observations=observations.clone();
+this.observations=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+synchronized(this){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
+}
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+observations=observations;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(true){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+int a=0;
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+int a=0;
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+String OUTSTRING="";
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+String OUTSTRING="";
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+int length=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+int LocalizedFormats=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+int INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(Double.isNaN(observations.length)){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+int INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE=8;
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+int INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE=8;
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+int length=8;
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+int a=1;
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+int a=1;
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+String length="%#.&f";
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+String INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE="%#.&f";
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+boolean INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+boolean LocalizedFormats=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+boolean length=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+boolean b=true;
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+boolean b=true;
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||observations.length==Long.MIN_VALUE){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+assert (observations!=null);
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+assert (observations!=null);
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+if(observations!=null){
+throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
+}
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
+assert (observations!=null);
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||"查看红包".equals(observations.length)){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||observations.length==3){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+synchronized(this){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
+}
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<0||observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||observations.length==0){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||observations.length>9){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4&&observations.length<4000000){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4&&observations.length!=9999){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(4>0&&observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+assert (observations!=null):"Appointments day is not allowed to be null!";
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
+assert (observations!=null):"Appointments day is not allowed to be null!";
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
-if(observations.length<4){
+if(observations.length<4||observations.length=='"'){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
+}
+if(observations==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 this.observations=observations.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[189,202]
------------Candidate---------------
 public ParameterGuesser(WeightedObservedPoint[] observations){
+long startTime=System.currentTimeMillis();
 if(observations.length<4){
 throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);
 }
 this.observations=observations.clone();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:51:29 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.fitting.HarmonicFitter.guess:[215, 216, 217, 218]#0.4472135954999579
Compute Candidate : 2019.09.05 AD at 09:52:55 CDT - 2019.09.05 AD at 09:56:48 CDT , PNumber : 11294, CandNumber : 2 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[204,219]
------------Candidate---------------
 public double[] guess(){
 sortObservations();
 guessAOmega();
 guessPhi();
-return new double{a,omega,phi};
+return this.guess();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[204,219]
------------Candidate---------------
 public double[] guess(){
 sortObservations();
 guessAOmega();
 guessPhi();
-return new double{a,omega,phi};
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 09:56:55 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.fitting.HarmonicFitter.sortObservations:[228, 229, 230, 231, 232, 246]#0.4472135954999579
Compute Candidate : 2019.09.05 AD at 09:58:21 CDT - 2019.09.05 AD at 10:33:01 CDT , PNumber : 11389, CandNumber : 344 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+continue;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j<=observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<=prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+curr=observations[j];
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+curr=observations[j];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.Collection;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,myUid;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,DEFAULT_TIMEOUT2;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j>observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()>prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,MAX_SERVICE_NODES;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,MAX_ZK_WAIT_RETRY_TIMES;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+break;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<curr.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while((i>=0)&&(curr.getX()<curr.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while((i>=0)&&(curr.getX()<prec.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(prec.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[0];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+WeightedObservedPoint curr=observations[1];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[1];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getY()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getY()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,localLevel;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
-observations[i+1]=mI;
+observations[i+1]=curr;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
-observations[i+1]=curr;
+observations[i+1]=prec;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
-observations[i+1]=mI;
+observations[i+1]=prec;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+WeightedObservedPoint curr=observations[2];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[2];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j<observations.length;++j,new ArrayList<KeyBinding>()){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+WeightedObservedPoint mI=observations[j];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
-if(i--!=0){
+if(j--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,_afterComposeMethodCache;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+i--;
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+curr=observations[j];
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,mActions;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
-observations[i+1]=mI;
+observations[i+j]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
-observations[i+1]=curr;
+observations[i+j]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,mRelationId;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j<observations.length;--j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3078/pattern-ver1-serial/src.PairCell.java-calculateScore.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+ WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
-int i=j-1;
+ int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+ WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
-int i=j-1;
+ int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+this.sortObservations();
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+this.sortObservations();
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+this.sortObservations();
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+j++;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+j++;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+i++;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+j++;
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+j++;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+j++;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+j++;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+j--;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+j--;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+i--;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+j--;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+j--;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+j--;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+j--;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=curr;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=curr;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
-mI=observations[i];
+mI=curr;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=prec;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=prec;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j++];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j++];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+WeightedObservedPoint curr=this.observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=this.observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+synchronized(this){
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+synchronized(this){
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+synchronized(this){
 observations[i+1]=curr;
+}
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=null;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(prec.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while((i>=0)&&(prec.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+j++;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
-mI=observations[i];
+mI=prec;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,continentName,countryCode;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(equals(prec)){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(equals(mI)){
+return ;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getY()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while((i>=0)&&(curr.getY()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4188/pattern-ver1-serial/extras.edu.umd.cs.piccolox.util.LineShape.java-intersects.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+while(true){
+
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
+while(true){
+
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1,userEmail;j<observations.length;++j,++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+break;
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+break;
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+break;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+synchronized(this){
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr==null){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr==null){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec==null){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr==null){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(mI==null){
+return ;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr==null){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
+if(curr==null){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j<observations.length;++j,Charset.forName("UTF-8")){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec==curr){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr==prec){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec==null){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(curr==null){
+return ;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
+if(curr==observations[0]){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(prec==curr){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if("index".equals(curr)){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if("index".equals(curr)){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if("index".equals(j)){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if("index".equals(prec)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+if("index".equals(j)){
+return ;
+}
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if("index".equals(i)){
+return ;
+}
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.equals("TIME")){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("TIME")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("TIME")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if("&null".equals(curr)){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if("&null".equals(curr)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if("&null".equals(j)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if("&null".equals(prec)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if("&null".equals(j)){
+return ;
+}
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if("&null".equals(i)){
+return ;
+}
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec==null){
+continue;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr==null){
+continue;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr.equals("DATETIME")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("DATETIME")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("DATETIME")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j-1];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j-1];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ @SuppressWarnings("UnusedAssignment") WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ @SuppressWarnings("UnusedAssignment") WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+ @SuppressWarnings("UnusedAssignment") WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+ @SuppressWarnings("UnusedAssignment") WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
-WeightedObservedPoint prec=curr;
+ @SuppressWarnings("UnusedAssignment") WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
-int i=j-1;
+ @SuppressWarnings("UnusedAssignment") int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+prec=curr;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+curr=curr;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr!=null){
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+j=j;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.equals("")){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
+if(curr.equals("")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(mI.equals("")){
+return ;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(j<0){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr==null){
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+if(curr==null){
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+if(observations[i+1]==null){
 observations[i+1]=curr;
+}
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("-1")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("-1")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.equals("-1")){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
+if(curr.equals("-1")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(mI.equals("-1")){
+return ;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+int a=0;
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+int a=0;
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+int a=0;
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals(curr)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.equals(j)){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr.equals(prec)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals(j)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(i==0.0){
+continue;
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+}
 }
+if(i==0.0){
+continue;
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+String OUTSTRING="";
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+String OUTSTRING="";
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+String OUTSTRING="";
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+int observations=5;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+int i=5;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals(InputStream.class)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.equals(InputStream.class)){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr.equals(InputStream.class)){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(curr.equals(InputStream.class)){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+int indexSelection=0;
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.Arrays;
+
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
+WeightedObservedPoint curr=observations[0-1];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("setPackMode")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(prec.equals("setPackMode")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec.equals("sounds")){
+continue;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.equals("sounds")){
+continue;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+int a=1;
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+int a=1;
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+int a=1;
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+boolean mI=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+boolean b=true;
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+boolean b=true;
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+boolean b=true;
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec.equals(null)){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.equals(null)){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr==null){
+continue;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec==null){
+continue;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
-for(int j=1;j<observations.length;++j){
+for(int j=1;j<observations.length;Math.abs(++j)){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j&0xff];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j&0xff];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if((Thread.currentThread().interrupted())){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j++];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j++];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j++];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+WeightedObservedPoint mI=observations[i++];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
-WeightedObservedPoint mI=observations[i];
+WeightedObservedPoint mI=observations[i++];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j++];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+assert (curr!=null);
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+assert (curr!=null);
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+assert (prec!=null);
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr!=null){
+WeightedObservedPoint prec=curr;
+curr=observations[j];
+if(curr.getX()<prec.getX()){
+int i=j-1;
+WeightedObservedPoint mI=observations[i];
+while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=mI;
+if(i--!=0){
+mI=observations[i];
+}
+}
+observations[i+1]=curr;
+curr=observations[j];
+}
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+assert (curr!=observations[0]);
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+assert (prec!=curr);
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+assert (i!=j-1);
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+assert (mI!=observations[i]);
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+assert (curr!=null);
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec.equals("655")){
+System.out.println();
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.equals("655")){
+System.out.println();
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||"查看红包".equals(curr.getX())){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||curr.getX()==3){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr!=null&&curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<0||curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
 }
+curr=observations[j];
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+mI=observations[i];
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
+mI=observations[i];
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+curr=observations[j];
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+curr=observations[j];
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
+curr=observations[j];
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
+curr=observations[j];
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
+curr=observations[j];
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+curr=observations[j];
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+curr=observations[j];
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+curr=observations[j];
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+curr=observations[j];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+curr=observations[j];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+curr=observations[j];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+curr=observations[j];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+mI=observations[i];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+curr=observations[j];
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+curr=observations[j];
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(true){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()==false){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+curr=observations[j];
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||curr.getX()==Long.MIN_VALUE){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()&&false){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||curr.getX()==0){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||curr.getX()>9){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
-WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+WeightedObservedPoint curr=observations[0];
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+try{
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+curr=observations[j];
+}
+}finally{
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()&&curr.getX()<4000000){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(Double.isNaN(curr.getX())){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()==true){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+mI=observations[i];
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+mI=observations[i];
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()&&curr.getX()!=9999){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(prec.getX()>0&&curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+assert (j>=0):"Receive a negative tratment";
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+assert (j>=0):"Receive a negative tratment";
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+assert (i>=0):"Receive a negative tratment";
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()==-2){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4193/pattern-ver1-serial/simple-comsumer.src.main.java.com.wxmimperio.simple.consumer.clients.SimpleConsumerAPI.java-init.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr==null||curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+assert (curr!=null):"Appointments day is not allowed to be null!";
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+assert (curr!=null):"Appointments day is not allowed to be null!";
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+assert (prec!=null):"Appointments day is not allowed to be null!";
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+assert (j!=0):"Receive a size tratment";
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+assert (j!=0):"Receive a size tratment";
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+assert (i!=0):"Receive a size tratment";
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()<prec.getX()||curr.getX()=='"'){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(prec!=null&&(curr.getX()<prec.getX())){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(j>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+int i=j-1;
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
-int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr==null){
+return ;
+}
 WeightedObservedPoint prec=curr;
+if(prec==null){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec==null){
+return ;
+}
+if(curr==null){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
+curr=observations[j-1];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
-curr=observations[j];
+curr=observations[j-1];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/6266/pattern-ver1-serial/src.uz.unicon.clg.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(curr.equals("NAME")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(curr.equals("CALL_RECEIVED_AT")){
+return ;
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(curr.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(prec.equals("NAME")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+curr=observations[j];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+curr=observations[j];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+curr=observations[j];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+curr=observations[j];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+mI=observations[i];
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+curr=observations[j];
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+curr=observations[j];
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+curr=observations[j];
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+curr=observations[j];
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(curr.equals("INFO")){
+return ;
+}
+if(curr.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.equals("INFO")){
+return ;
+}
+if(curr.equals("UNIT")){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec.equals("INFO")){
+return ;
+}
+if(prec.equals("UNIT")){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr!=observations[j]){
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+observations[i+1]=curr;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=curr;
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=mI;
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr!=null&&prec!=null){
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1305/pattern-ver1-serial/portlets.proposals-portlet.src.main.java.org.xcolab.jsp.tags.discussion.GetRoleNameTag.java-doStartTag.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr==null||prec==null){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(prec==null||curr==null){
+return ;
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+while((i>=0)&&(curr.getX()<mI.getX())){
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
+observations[i+1]=curr;
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr!=null){
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(prec==null){
+throw new IllegalStateException("User isn't registered! "+curr);
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr==null){
+throw new IllegalStateException("User isn't registered! "+j);
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+if(mI==null){
+throw new IllegalStateException("User isn't registered! "+i);
+}
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if((curr.getX())<(prec.getX())){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while((i>=0)&&((curr.getX())<(mI.getX()))){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+observations[i+1]=curr;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+observations[i+1]=curr;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+observations[i+1]=mI;
 while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=mI;
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+observations[i+1]=curr;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+observations[i+1]=curr;
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean succeeded=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+succeeded=true;
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(!succeeded){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean succeeded=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+succeeded=true;
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(!succeeded){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean succeeded=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+succeeded=true;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(!succeeded){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+boolean succeeded=false;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+succeeded=true;
 }
 observations[i+1]=curr;
+if(!succeeded){
+return ;
+}
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+boolean succeeded=false;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+succeeded=true;
 }
 }
 observations[i+1]=curr;
+if(!succeeded){
+return ;
+}
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if(observations[i]!=null){
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+}
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6804/pattern-ver1-serial/HashTableProject.src.IndexedColorEncoder.java-encodeFast.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+if(curr.getX()<0||curr.getY()<0){
+return ;
+}
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/2223/pattern-ver1-serial/org.activiti.designer.gui.src.main.java.org.activiti.designer.features.MoveEventFeature.java-canMoveShape.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
+if(curr.getX()<0||curr.getY()<0){
+return ;
+}
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/2223/pattern-ver1-serial/org.activiti.designer.gui.src.main.java.org.activiti.designer.features.MoveEventFeature.java-canMoveShape.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
+if(curr.getX()<0||curr.getY()<0){
+return ;
+}
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/2223/pattern-ver1-serial/org.activiti.designer.gui.src.main.java.org.activiti.designer.features.MoveEventFeature.java-canMoveShape.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+if(curr.getX()<0||curr.getY()<0){
+return ;
+}
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/2223/pattern-ver1-serial/org.activiti.designer.gui.src.main.java.org.activiti.designer.features.MoveEventFeature.java-canMoveShape.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
+if(curr.getX()<0||curr.getY()<0){
+return ;
+}
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/2223/pattern-ver1-serial/org.activiti.designer.gui.src.main.java.org.activiti.designer.features.MoveEventFeature.java-canMoveShape.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+if(j==3){
+System.out.println("debug");
+}
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+}
+if(j==3){
+System.out.println("debug");
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+if(j==3){
+System.out.println("debug");
+}
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+}
 }
+if(j==3){
+System.out.println("debug");
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
+if(j==3){
+System.out.println("debug");
+}
 mI=observations[i];
+if(j==3){
+System.out.println("debug");
+}
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+if(j==3){
+System.out.println("debug");
+}
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
+if(j==3){
+System.out.println("debug");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean haveBreadCrumbs=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+haveBreadCrumbs=true;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
-if(i--!=0){
+if(i--!=0&&haveBreadCrumbs){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean haveBreadCrumbs=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
-if(i--!=0){
+if(i--!=0&&haveBreadCrumbs){
 mI=observations[i];
 }
+haveBreadCrumbs=true;
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+boolean haveBreadCrumbs=false;
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
-if(i--!=0){
+if(i--!=0&&haveBreadCrumbs){
 mI=observations[i];
+haveBreadCrumbs=true;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+boolean haveBreadCrumbs=false;
+if(curr.getX()<prec.getX()&&haveBreadCrumbs){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
+haveBreadCrumbs=true;
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+boolean haveBreadCrumbs=false;
+if(curr.getX()<prec.getX()&&haveBreadCrumbs){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
+haveBreadCrumbs=true;
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+boolean haveBreadCrumbs=false;
+if(curr.getX()<prec.getX()&&haveBreadCrumbs){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+haveBreadCrumbs=true;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()==','||curr.getX()==']'||curr.getX()=='}'){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/5747/pattern-ver1-serial/java.src.advent.twelve.JsonParser.java-parseJson.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if((curr.getX())<(prec.getX())){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while(((i>=0))&&((curr.getX()<mI.getX()))){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while(((i>=0)&&(curr.getX()<mI.getX()))&&i<100){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+int i=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 9, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while(((i>=0)&&(curr.getX()<mI.getX()))&&i<100){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+int i=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 9, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
+long startTime=System.currentTimeMillis();
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+long startTime=System.currentTimeMillis();
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
+long startTime=System.currentTimeMillis();
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while(((i>=0)&&(curr.getX()<mI.getX()))&&i<100){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+i++;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
+int i=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 9, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
+while(((i>=0)&&(curr.getX()<mI.getX()))&&i<100){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+i++;
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
+int i=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 9, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
-if(curr.getX()<prec.getX()){
+if(curr.getX()==','||curr.getX()==']'||curr.getX()=='}'){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=mI;
+if(curr.getX()<prec.getX()){
+}else {
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
+}
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/5747/pattern-ver1-serial/java.src.advent.twelve.JsonParser.java-parseJson.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
 if(curr.getX()<prec.getX()){
+synchronized(this){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 42, UPD : 42, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
-curr=observations[j];
-if(curr.getX()<prec.getX()){
-int i=j-1;
-WeightedObservedPoint mI=observations[i];
-while((i>=0)&&(curr.getX()<mI.getX())){
-observations[i+1]=mI;
-if(i--!=0){
-mI=observations[i];
-}
-}
-observations[i+1]=curr;
 curr=observations[j];
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 0, DEL : 47
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
 curr=observations[j];
+if(curr.getX()==12){
+return ;
+}else {
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 47, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[221,246]
------------Candidate---------------
 private void sortObservations(){
 WeightedObservedPoint curr=observations[0];
 for(int j=1;j<observations.length;++j){
 WeightedObservedPoint prec=curr;
+curr=observations[j];
+if(curr.getX()<prec.getX()){
+int i=j-1;
+WeightedObservedPoint mI=observations[i];
+while((i>=0)&&(curr.getX()<mI.getX())){
+observations[i+1]=mI;
+if(i--!=0){
+mI=observations[i];
+}
+}
+observations[i+1]=curr;
 curr=observations[j];
+}
 if(curr.getX()<prec.getX()){
 int i=j-1;
 WeightedObservedPoint mI=observations[i];
 while((i>=0)&&(curr.getX()<mI.getX())){
 observations[i+1]=mI;
 if(i--!=0){
 mI=observations[i];
 }
 }
 observations[i+1]=curr;
 curr=observations[j];
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 48, UPD : 0, INS : 1, DEL : 47
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 10:58:39 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.fitting.HarmonicFitter.guessPhi:[336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 356, 357]#0.4472135954999579
Compute Candidate : 2019.09.05 AD at 10:59:59 CDT - 2019.09.05 AD at 11:39:37 CDT , PNumber : 11406, CandNumber : 573 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
-double fsMean=0;
+ double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+ double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
- final double previousX=currentX;
+ double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
- final double previousY=currentY;
+ double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
-double omegaX=omega*currentX;
+ double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;currentX<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;currentY<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;phi<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;fcMean<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;fsMean<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<=observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentX=observations[i].getX();
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY=observations[i].getY();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Collection;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,myUid;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,DEFAULT_TIMEOUT2;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i>observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,MAX_SERVICE_NODES;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,MAX_ZK_WAIT_RETRY_TIMES;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine-currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[0].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[0].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+double currentX=observations[1].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[1].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[1].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[1].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+double currentX=observations[0].getY();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getY();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6430/pattern-ver1-serial/common.logisticspipes.modules.ModuleTerminus.java-getY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-2)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(currentX-2);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,localLevel;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,phi;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+double currentX=observations[2].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[2].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[2].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[2].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(currentX-1);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-1)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-fcMean)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(currentX-fcMean);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-fsMean)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-currentX)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(currentX-currentX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-currentY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(currentX-currentY);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++i,new ArrayList<KeyBinding>()){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
-double omegaX=omega*currentX;
+double omegaX=phi*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=phi*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-phi*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=phi*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+phi*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-2,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+int fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
-double fsMean=0;
+int fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,_afterComposeMethodCache;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+float fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
-double fsMean=0;
+float fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.List;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,mActions;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++fcMean){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++fsMean){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fcMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++currentX){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++currentY){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++phi){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[0].getX();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2191/pattern-ver1-serial/AndroidMainApp.main.src.net.thiagoalz.hermeto.panel.GameManager.java-startPlayingGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getX();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2191/pattern-ver1-serial/AndroidMainApp.main.src.net.thiagoalz.hermeto.panel.GameManager.java-startPlayingGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+phi=FastMath.atan2(-fsMean,fcMean);
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,mRelationId;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;--i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3078/pattern-ver1-serial/src.PairCell.java-calculateScore.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+ double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+ double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
- final double previousX=currentX;
+ double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
- final double previousY=currentY;
+ double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
-double fsMean=0;
+ double fcMean=0;
+ double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
-double omegaX=omega*currentX;
+ double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+double currentX=this.observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=this.observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=this.observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=this.observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+this.guessPhi();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+this.guessPhi();
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+fcMean++;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+fsMean++;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+i++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+currentX++;
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentX++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+currentY++;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentY++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+i++;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX++;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY++;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+fcMean++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+fsMean++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:54:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+fcMean--;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+i--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+fsMean--;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentX--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+currentX--;
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentY--;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+currentY--;
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+fcMean--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+fsMean--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+i--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentX--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentY--;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i++].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i++].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+synchronized(this){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
+synchronized(this){
 phi=FastMath.atan2(-fsMean,fcMean);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+synchronized(this){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+synchronized(this){
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+double cosine=FastMath.cos((int)(omegaX));
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+double sine=FastMath.sin((int)(omegaX));
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+i++;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentX++;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentY++;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,continentName,countryCode;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(equals(fcMean)){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(equals(fsMean)){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(equals(omegaX)){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(equals(omegaX)){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(equals(i)){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(equals(i)){
+return ;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 11:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1,userEmail;i<observations.length;++i,++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=((currentY)+previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/((currentX)+previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;++i,Charset.forName("UTF-8")){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine==currentX){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine==currentX){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentY==currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(i==currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(previousX==currentX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(previousY==currentX){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+if(currentYPrime==currentX){
+return ;
+}
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX==currentX){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX==currentY){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX==i){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(currentX==cosine){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentX==sine){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(currentX==previousX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentX==previousY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+if(currentX==currentYPrime){
+return ;
+}
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(currentX==omegaX){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+if(observations[0]==null){
+return ;
+}
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+if(observations[0]==null){
+return ;
+}
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]==null){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(previousX==currentX){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(previousX==currentX){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(previousY==currentY){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(previousY==currentY){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(omegaX==omega*currentX){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(omegaX==omega*currentX){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+if(previousX==currentX){
+return ;
+}
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+if(previousY==currentY){
+return ;
+}
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX==omega*currentX){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(previousY==currentY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i].getX()!=0){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
+if(FastMath.atan2(-fsMean,fcMean)!=0){
 phi=FastMath.atan2(-fsMean,fcMean);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(omega*currentY*cosine-currentYPrime*sine!=0){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(omega*currentY*sine+currentYPrime*cosine!=0){
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+if("index".equals(fcMean)){
+return ;
+}
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+if("index".equals(fsMean)){
+return ;
+}
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if("index".equals(currentX)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+if("index".equals(currentX)){
+return ;
+}
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if("index".equals(currentY)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if("index".equals(cosine)){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if("index".equals(sine)){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+if("index".equals(currentY)){
+return ;
+}
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if("index".equals(i)){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("index".equals(previousX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+if("&null".equals(fcMean)){
+return ;
+}
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+if("&null".equals(fsMean)){
+return ;
+}
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+if("&null".equals(currentX)){
+return ;
+}
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(currentX)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+if("&null".equals(currentY)){
+return ;
+}
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(currentY)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if("&null".equals(cosine)){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if("&null".equals(sine)){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if("&null".equals(i)){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=currentY-previousY*100/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/currentX-previousX*100;
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]==null){
+return ;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(30-(-fsMean),fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,30-(fcMean));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i-1].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i-1].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ @SuppressWarnings("UnusedAssignment") double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ @SuppressWarnings("UnusedAssignment") double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
-double fsMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ @SuppressWarnings("UnusedAssignment") double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
-double fsMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+ @SuppressWarnings("UnusedAssignment") double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
- final double previousX=currentX;
+ @SuppressWarnings("UnusedAssignment") double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ @SuppressWarnings("UnusedAssignment") double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
- final double previousY=currentY;
+ @SuppressWarnings("UnusedAssignment") double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ @SuppressWarnings("UnusedAssignment") double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
-double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+ @SuppressWarnings("UnusedAssignment") double omegaX=omega*currentX;
+ @SuppressWarnings("UnusedAssignment") double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ @SuppressWarnings("UnusedAssignment") double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ @SuppressWarnings("UnusedAssignment") double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ @SuppressWarnings("UnusedAssignment") double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
-double fsMean=0;
-double currentX=observations[0].getX();
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fsMean=0;
+ @SuppressWarnings("UnusedAssignment") double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
-double fcMean=0;
-double fsMean=0;
+ @SuppressWarnings("UnusedAssignment") double fcMean=0;
+ @SuppressWarnings("UnusedAssignment") double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+ @SuppressWarnings("UnusedAssignment") double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=2;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=2;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+currentX=fcMean;
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+currentY=fcMean;
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=3;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=3;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+i=i;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX=currentX;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY=currentY;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=i;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=i;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+cosine=1000;
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/2;
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-2;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fcMean<0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fsMean<0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<0){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(omegaX<0){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(i<0){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(i<0){
+return ;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=fcMean;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=fcMean;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=fsMean;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=fsMean;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=currentX;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=currentX;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=currentY;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=currentY;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=10;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=10;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+int a=0;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+int a=0;
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(2.0*(-fsMean),fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,2.0*(fcMean));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=currentY-previousY*5/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/currentX-previousX*5;
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=1.0/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(cosine==0.0){
+continue;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine==0.0){
+continue;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(cosine==0.0){
+continue;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(sine==0.0){
+continue;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentYPrime==0.0){
+continue;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(currentYPrime==0.0){
+continue;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentY==0.0){
+continue;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(currentY==0.0){
+continue;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+String OUTSTRING="";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+String OUTSTRING="";
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=100;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=100;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+int observations=5;
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0.0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0.0;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=phi*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(Math.round(-fsMean),fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,Math.round(fcMean));
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+(int)(currentYPrime*cosine);
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<=0){
+return ;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<=0){
+return ;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentX<=0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentY<=0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/currentX;
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=currentY/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-1.0*currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+1.0*currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+-1;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+double cosine=FastMath.cos(Math.abs(omegaX));
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+double sine=FastMath.sin(Math.abs(omegaX));
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;Math.abs(++i)){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=(currentY-previousY)/(int)(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX==0){
+return ;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY==0){
+return ;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
+if(phi==0){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentX==0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentY==0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(fcMean==0){
+return ;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+if(fsMean==0){
+return ;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fcMean==0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fsMean==0){
+return ;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+int indexSelection=0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+int indexSelection=0;
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(Math.max(-fsMean,fcMean),fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,Math.max(-fsMean,fcMean));
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Arrays;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
+double currentX=observations[0-1].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Arrays;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
+double currentY=observations[0-1].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+3;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+fcMean;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+fsMean;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentX;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentY;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+i;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+previousX;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+previousY;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+omegaX;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=currentX+observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=currentY+observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+int a=1;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+int a=1;
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+boolean FastMath=true;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+boolean observations=true;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+sine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+boolean b=true;
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+boolean b=true;
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()+1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getY()+1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i&0xff].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i&0xff].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/7731/pattern-ver1-serial/src.jassemble.CPU.java-setMem.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=4;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=4;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=5;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=5;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=observations[i++].getX();
+currentY=observations[i++].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+assert (fcMean!=0);
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+assert (fsMean!=0);
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+assert (currentX!=observations[0].getX());
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+assert (currentY!=observations[0].getY());
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+assert (previousX!=currentX);
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+assert (previousY!=currentY);
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+assert (omegaX!=omega*currentX);
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+assert (cosine!=FastMath.cos(omegaX));
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+assert (sine!=FastMath.sin(omegaX));
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
-double cosine=FastMath.cos(omegaX);
+double cosine=FastMath.cos(Math.max(omegaX,0));
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
-double sine=FastMath.sin(omegaX);
+double sine=FastMath.sin(Math.max(omegaX,0));
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
-for(int i=1;i<observations.length;++i){
+for(int i=1;i<observations.length;Math.max(++i,0)){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
- final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+ final double currentYPrime=((currentY-previousY))+(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=1;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=2;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=3;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+1+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=fcMean;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=fsMean;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=(FastMath.atan2(-fsMean,fcMean)+fcMean)%fcMean;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=(FastMath.atan2(-fsMean,fcMean)+fsMean)%fsMean;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=(observations[i].getX()+i)%i;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=(observations[i].getY()+i)%i;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=10;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=100;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=phi-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+assert (fcMean>=0):"Receive a negative tratment";
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+assert (fsMean>=0):"Receive a negative tratment";
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (currentX>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+assert (currentX>=0):"Receive a negative tratment";
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (currentY>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+assert (currentY>=0):"Receive a negative tratment";
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (i>=0):"Receive a negative tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+assert (previousX>=0):"Receive a negative tratment";
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+assert (previousY>=0):"Receive a negative tratment";
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+assert (currentYPrime>=0):"Receive a negative tratment";
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+this.phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=0;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+this.phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
+currentX++;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
+currentY++;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=-1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
+currentX++;
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=-1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
+currentY++;
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
+assert (fcMean!=0):"Receive a size tratment";
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+assert (fsMean!=0):"Receive a size tratment";
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (currentX!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+assert (currentX!=0):"Receive a size tratment";
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (currentY!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+assert (currentY!=0):"Receive a size tratment";
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+assert (i!=0):"Receive a size tratment";
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+assert (previousX!=0):"Receive a size tratment";
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+assert (previousY!=0):"Receive a size tratment";
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+assert (currentYPrime!=0):"Receive a size tratment";
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,fcMean)+1;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=4;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(observations[i]==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(omegaX>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(i>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(i>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(previousY>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(previousX>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(currentY>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+currentX=observations[i].getX();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+currentY=observations[i].getY();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentX=observations[i].getX();
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+currentY=observations[i].getY();
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+currentX=observations[i].getX();
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+currentY=observations[i].getY();
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+currentX=observations[i].getX();
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+currentY=observations[i].getY();
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX=0;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY=0;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentX<0){
+currentX=0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(currentY<0){
+currentY=0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
+if(phi<0){
+phi=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(fcMean<0){
+fcMean=0;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+if(fsMean<0){
+fsMean=0;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fcMean<0){
+fcMean=0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fsMean<0){
+fsMean=0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(currentX>=cosine){
+return ;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentX>=sine){
+return ;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
+if(currentX>=currentY){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
+if(currentX>=i){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
+if(currentX>=previousX){
+return ;
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentX>=previousY){
+return ;
+}
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+if(currentX>=currentYPrime){
+return ;
+}
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX<0){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(currentX>=omegaX){
+return ;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentY<0){
+return ;
+}
+if(currentY>=currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(i<0){
+return ;
+}
+if(i>=currentX){
+return ;
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+currentX=observations[i].getX();
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+currentY=observations[i].getY();
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(cosine<=0){
+cosine=1;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(sine<=0){
+sine=1;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<=0){
+omegaX=1;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(omegaX<=0){
+omegaX=1;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentX<=0){
+currentX=1;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<=0){
+currentY=1;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentX>previousX){
+currentX=previousX;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentX>previousY){
+currentX=previousY;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY>previousX){
+currentY=previousX;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY>previousY){
+currentY=previousY;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentY=observations[i].getY();
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
-double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+double currentX=observations[0].getX();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
-double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+double currentY=observations[0].getY();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+try{
 currentX=observations[i].getX();
+}finally{
 currentY=observations[i].getY();
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+try{
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}finally{
+currentX=observations[i].getX();
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+try{
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}finally{
+currentX=observations[i].getX();
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+try{
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}finally{
+currentY=observations[i].getY();
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+try{
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}finally{
+currentY=observations[i].getY();
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=observations[i-1].getX();
+currentY=observations[i-1].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/6266/pattern-ver1-serial/src.uz.unicon.clg.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(fcMean<=0){
+fcMean=currentY;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+if(fsMean<=0){
+fsMean=currentY;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fcMean<=0){
+fcMean=currentY;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
+if(fsMean<=0){
+fsMean=currentY;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=observations[i].getX()+1;
+currentY=1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentX=1;
+currentY=observations[i].getY()+1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=(omega*currentY*cosine)+currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+phi++;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=-1;
+phi++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 5, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+phi=FastMath.atan2(-fsMean,fcMean);
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+phi=FastMath.atan2(-fsMean,fcMean);
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+phi=FastMath.atan2(-fsMean,fcMean);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+phi=FastMath.atan2(-fsMean,fcMean);
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(currentY!=observations[i].getY()){
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentX!=observations[i].getX()){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(currentY!=observations[i].getY()){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(currentX!=observations[i].getX()){
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+if(currentY!=observations[i].getY()){
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+}
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(observations[i]!=null){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(observations[i]!=null){
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+}
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
+phi=FastMath.atan2(-fsMean,fcMean);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+phi=FastMath.atan2(-fsMean,fcMean);
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+phi=FastMath.atan2(-fsMean,fcMean);
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+phi=FastMath.atan2(-fsMean,fcMean);
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+currentX=observations[i].getX();
+if(currentX<0){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<0){
+omegaX=omega*currentX;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentY=observations[i].getY();
+if(currentY<0){
 currentY=observations[i].getY();
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<0){
+omegaX=omega*currentX;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+boolean succeeded=false;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+if(!succeeded){
+return ;
+}
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+succeeded=true;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,fcMean)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=FastMath.atan2(-fsMean,fcMean)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()+1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getY()+1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
+phi=1;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=1;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=-1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=-1;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=0;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=2;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=2;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=3;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=3;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=currentYPrime;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=currentYPrime;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=cosine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=sine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*fcMean;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*fcMean;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*fsMean;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*fsMean;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*currentX;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*currentX;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*currentY;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*currentY;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*i;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*i;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=10;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=10;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=100;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=100;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=0.0;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=0.0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=fcMean+omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=fsMean+omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=4;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=4;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=5;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=5;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(fcMean==3){
+System.out.println("debug");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(fcMean==3){
+System.out.println("debug");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
+if(fcMean==3){
+System.out.println("debug");
+}
+if(fcMean==3){
+System.out.println("debug");
+}
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(fsMean==3){
+System.out.println("debug");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(fsMean==3){
+System.out.println("debug");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
+if(fsMean==3){
+System.out.println("debug");
+}
+if(fsMean==3){
+System.out.println("debug");
+}
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentX==3){
+System.out.println("debug");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX==3){
+System.out.println("debug");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+if(currentX==3){
+System.out.println("debug");
+}
+if(currentX==3){
+System.out.println("debug");
+}
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(currentY==3){
+System.out.println("debug");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentY==3){
+System.out.println("debug");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
+if(currentY==3){
+System.out.println("debug");
+}
+if(currentY==3){
+System.out.println("debug");
+}
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+if(i==3){
+System.out.println("debug");
+}
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(i==3){
+System.out.println("debug");
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
+if(previousX==3){
+System.out.println("debug");
+}
+if(previousX==3){
+System.out.println("debug");
+}
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine--;
+}
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine--;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX--;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine--;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX--;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine--;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<0){
+omegaX--;
+}
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine--;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<0){
+omegaX--;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine--;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY--;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine--;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY--;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine--;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=-1;
+fcMean++;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=-1;
+fsMean++;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=-1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
+fcMean++;
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=-1;
 }
+fsMean++;
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<3){
+cosine=3;
+}
 double sine=FastMath.sin(omegaX);
+if(sine<3){
+sine=3;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<3){
+omegaX=3;
+}
 double cosine=FastMath.cos(omegaX);
+if(cosine<3){
+cosine=3;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<3){
+omegaX=3;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<3){
+sine=3;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<3){
+currentX=3;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<3){
+omegaX=3;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<3){
+currentY=3;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
+if(omegaX<3){
+omegaX=3;
+}
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<3){
+currentX=3;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<3){
+cosine=3;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<3){
+currentY=3;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<3){
+cosine=3;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()*2;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*2;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()*2;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*2;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getY()*2;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*2;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=observations[i].getY()*2;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*2;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine=0;
+}
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine=0;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX=0;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine=0;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY=0;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
+if(cosine<0){
+cosine=0;
+}
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+if(currentX<0){
+currentX=0;
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine=0;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+if(currentY<0){
+currentY=0;
+}
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
+if(sine<0){
+sine=0;
+}
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine+1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
-currentY=observations[i].getY();
+currentY=1;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine+1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean+=omega*currentY*sine+currentYPrime*cosine+1;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
-currentX=observations[i].getX();
+currentX=observations[i].getX()+1;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean+=1;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
+long startTime=System.currentTimeMillis();
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
+long startTime=System.currentTimeMillis();
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
+if(observations[i]!=null){
 currentX=observations[i].getX();
+}
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
-phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/2148/pattern-ver1-serial/src.main.java.com.fasterxml.sort.Merger.java-close.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 7, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean=Math.round(fcMean*100.0)/100.0;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean=Math.round(fsMean*100.0)/100.0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX=Math.round(currentX*100.0)/100.0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean=Math.round(fcMean*100.0)/100.0;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
+currentX=Math.round(currentX*100.0)/100.0;
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean=Math.round(fsMean*100.0)/100.0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentY=Math.round(currentY*100.0)/100.0;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
+fcMean=Math.round(fcMean*100.0)/100.0;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
+currentY=Math.round(currentY*100.0)/100.0;
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
 fcMean+=omega*currentY*cosine-currentYPrime*sine;
 fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fsMean=Math.round(fsMean*100.0)/100.0;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_25_buggy/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java[331,357]
------------Candidate---------------
 private void guessPhi(){
 double fcMean=0;
 double fsMean=0;
 double currentX=observations[0].getX();
 double currentY=observations[0].getY();
 for(int i=1;i<observations.length;++i){
  final double previousX=currentX;
  final double previousY=currentY;
 currentX=observations[i].getX();
 currentY=observations[i].getY();
  final double currentYPrime=(currentY-previousY)/(currentX-previousX);
 double omegaX=omega*currentX;
 double cosine=FastMath.cos(omegaX);
 double sine=FastMath.sin(omegaX);
-fcMean+=omega*currentY*cosine-currentYPrime*sine;
-fsMean+=omega*currentY*sine+currentYPrime*cosine;
+fcMean+=omega*currentY*cosine-currentYPrime*sine*2;
+fsMean+=omega*currentY*sine+currentYPrime*cosine*2;
 }
 phi=FastMath.atan2(-fsMean,fcMean);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844]
---------START : 2019.09.05 AD at 07:08:22 CDT
---------TIME : 2019.09.05 AD at 12:08:25 CDT
--------------- END -----------------
Finish : math-25 > patch : 0 | Start : Thu Sep 05 07:08:22 CDT 2019 | End : 2019.09.05 AD at 12:08:25 CDT
