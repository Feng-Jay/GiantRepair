Repair : math_98
Current failed test : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1 | 2019.09.08 AD at 00:57:52 CDT
Location : org.apache.commons.math.linear.BigMatrixImpl.operate:[986, 989, 990, 991, 992, 993, 994, 995, 997]#0.5773502691896258
Compute Candidate : 2019.09.08 AD at 00:58:20 CDT - 2019.09.08 AD at 01:26:42 CDT , PNumber : 11313, CandNumber : 280 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+continue;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+return null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+return null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final long nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final long nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,myUid;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,myUid;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,DEFAULT_TIMEOUT2;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row>nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i>nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_SERVICE_NODES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_SERVICE_NODES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_ZK_WAIT_RETRY_TIMES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length==this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final float nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/1194/pattern-ver1-serial/src.backend.rest.SaveUserCompetences.java-saveUserCompetences.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row--){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i--){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final Integer nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final Integer nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[i][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,localLevel;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,localLevel;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length>this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,new ArrayList<KeyBinding>()){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,new ArrayList<KeyBinding>()){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].add(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ final BigDecimal[] out=new BigDecimal[(v.length)];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return v;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=out[row].add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;row++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,_afterComposeMethodCache;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,_afterComposeMethodCache;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+row++;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mActions;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mActions;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mRelationId;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mRelationId;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ int nCols=this.getColumnDimension();
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row++;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row--;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+synchronized(this){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+synchronized(this){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+operate(v);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+operate(v);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nRows=this.getRowDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,continentName,countryCode;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,continentName,countryCode;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+while(true){
+
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+while(true){
+
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,userEmail;row<nRows;row++,row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,userEmail;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+synchronized(this){
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,Charset.forName("UTF-8")){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,Charset.forName("UTF-8")){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+synchronized(this){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(this.data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null){
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+v=v;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(row==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(row==4){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(i==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]==null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=0;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=0;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=0;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=0;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(ZERO!=null){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6804/pattern-ver1-serial/HashTableProject.src.IndexedColorEncoder.java-encodeFast.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+String OUTSTRING="";
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+String OUTSTRING="";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+String OUTSTRING="";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+String OUTSTRING="";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final int nRows=getRowDimension();
+ final int nCols=getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6651/pattern-ver1-serial/library.src.main.java.com.alamkanak.weekview.WeekView.java-drawHeaderRowAndEvents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int ZERO=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int i=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(out[row].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(equals(v)){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nRows)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(equals(v)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nCols)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(equals(v)){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int indexSelection=0;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+int indexSelection=0;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+int indexSelection=0;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row-1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i-1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row-1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i-1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v.equals("sounds")){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=1;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=1;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=1;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=1;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=sum.setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean ZERO=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean i=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+boolean b=true;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+boolean b=true;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+boolean b=true;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+boolean b=true;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;Math.abs(row++)){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;Math.abs(i++)){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v!=null){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(this==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if(this==null){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nRows==this.getRowDimension()){
+return out;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(v==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+if("&null".equals(v)){
+return null;
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if("&null".equals(v)){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+if("&null".equals(nRows)){
+return null;
+}
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if("&null".equals(nCols)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if("&null".equals(out)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(out)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(sum)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals("-1")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("-1")){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==Long.MIN_VALUE){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+BigDecimal sum=ZERO;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(v==null){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null);
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v.equals(InputStream.class)){
+return out;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out.equals(InputStream.class)){
+return v;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(InputStream.class)){
+return v;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(Double.isNaN(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v!=null){
+if(v.length!=this.getColumnDimension()){
+throw new IllegalArgumentException("vector has wrong length");
+}
+ final int nRows=this.getRowDimension();
+ final int nCols=this.getColumnDimension();
+ final BigDecimal[] out=new BigDecimal[v.length];
+for(int row=0;row<nRows;row++){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
+return out;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v!=null){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=this.getRowDimension());
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=this.getColumnDimension());
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=new BigDecimal[v.length]);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=ZERO);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (v!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (v!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
+assert (v!=null);
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (out!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (sum!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals(null)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(null)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("655")){
+System.out.println();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||"查看红包".equals(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==3){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("player is not initialised, game might not be started");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("Root not directory or IO error occurred");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/7398/pattern-ver1-serial/core.src.main.java.org.infinispan.loaders.file.FileCacheStore.java-toStreamLockSafe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(nCols>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<0||v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("connection offline");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==0){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length>9){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+ final int nCols=this.getColumnDimension();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length<4000000){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length!=9999){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this.getColumnDimension()>0&&v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows>=0):"Receive a negative tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols>=0):"Receive a negative tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols>=0):"Receive a negative tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(data!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null):"Appointments day is not allowed to be null!";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null):"Appointments day is not allowed to be null!";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null):"Appointments day is not allowed to be null!";
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=0):"Receive a size tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols!=0):"Receive a size tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=0):"Receive a size tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length=='"'){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]==null?null:data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]!=null?data[row][i].multiply(v[i]):null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])==null?new BigDecimal(0):data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/3977/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TicketFareAirlineImpl.java-getDetailTicketFareAirline.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
+out[row]=sum;
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+out[row]=sum;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("User isn't registered! "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum==null){
+sum=out[row];
+}else {
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||v==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||out==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])).setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+succeeded=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+succeeded=true;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(nRows==3){
+System.out.println("debug");
+}
 sum=sum.add(data[row][i].multiply(v[i]));
+if(nRows==3){
+System.out.println("debug");
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(out[row]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+v.getClass().getName());
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nRows==0&&nCols==0&&out.equals("")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nRows+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nCols+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+long startTime=System.currentTimeMillis();
 sum=sum.add(data[row][i].multiply(v[i]));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+long startTime=System.currentTimeMillis();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+long startTime=System.currentTimeMillis();
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 10, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 01:44:59 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl:[154, 138, 139, 142, 145, 146, 149, 150, 153, 158, 160, 161]#0.22941573387056174
Compute Candidate : 2019.09.08 AD at 01:45:12 CDT - 2019.09.08 AD at 02:18:29 CDT , PNumber : 11317, CandNumber : 300 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+continue;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+return ;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+return ;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d!=null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final long nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final long nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<=nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Collection;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,myUid;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,DEFAULT_TIMEOUT2;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r>nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_SERVICE_NODES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_ZK_WAIT_RETRY_TIMES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+break;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length==nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(copyArray){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r--){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows!=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols!=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final Integer nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final Integer nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(true){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+if(d==null){
+throw new NullPointerException();
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,localLevel;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,data;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,lu;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length>nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,new ArrayList<KeyBinding>()){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=null;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,_afterComposeMethodCache;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r++;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.List;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mActions;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=data.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=lu.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mRelationId;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+copyIn(d);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==-1){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==-1){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(!copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/425/pattern-ver1-serial/app.src.main.java.com.pemws14.armyoffriends.GameMechanics.java-getPlayerLevelProgress.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+synchronized(this){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=d.clone();
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/52/pattern-ver1-serial/src.nl.esciencecenter.diffevo.ListOfParameterCombinations.java-setModelResults.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+synchronized(this){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean broadcast){
+if(broadcast){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,continentName,countryCode;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+while(true){
+
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
+while(true){
+
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:25:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,userEmail;r<nRows;r++,r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d[0]==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2172/pattern-ver1-serial/FTDriver.src.jp.ksksue.driver.serial.FTDriver.java-setFTDIEndpoints.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r--;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+synchronized(this){
 if(d==null){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+synchronized(this){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+synchronized(this){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+synchronized(this){
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+synchronized(this){
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+r++;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,Charset.forName("UTF-8")){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d.equals(null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+synchronized(this){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+synchronized(this){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+synchronized(this){
 copyIn(d);
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+copyIn(d);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+copyIn(d);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+copyIn(d);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+copyIn(d);
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+d=d;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
 copyIn(d);
+if(copyArray){
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(r==4){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(true){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(copyArray&&copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
+copyIn(d);
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu==null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(data==null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+copyIn(d);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=0;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=0;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=0;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=0;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=0;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=0;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean readOnly){
+if(!readOnly){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+String OUTSTRING="";
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String OUTSTRING="";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String OUTSTRING="";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+String OUTSTRING="";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+String OUTSTRING="";
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+String OUTSTRING="";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+copyIn(d);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+copyIn(d);
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+copyIn(d);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nCols=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nRows=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int length=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d!=null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(Double.isNaN(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(Double.isNaN(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(d)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(d)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(equals(d)){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(equals(d)){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(nCols)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(nCols)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(equals(d)){
+return ;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+int indexSelection=0;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+int indexSelection=0;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+int indexSelection=0;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nRows!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=1;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=1;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=1;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=1;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=1;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=1;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String length="%#.&f";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nCols=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nRows=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean length=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+boolean b=true;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+boolean b=true;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+boolean b=true;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+boolean b=true;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+boolean b=true;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+boolean b=true;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;Math.abs(r++)){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d==null){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
+data=d;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+lu=null;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+lu=null;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+lu=null;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+lu=null;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+lu=null;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+data=d;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+data=d;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+data=d;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+lu=null;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+data=d;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(nCols<0){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
+data=d;
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nRows=d.length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d==null){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(d==null){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
+}
+if(d==null){
+return ;
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+data=d;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null);
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+data=d;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d!=null){
+copyIn(d);
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d!=null){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(d!=null){
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d!=null){
+if(copyArray){
+copyIn(d);
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
+lu=null;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=d.length);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=d[0].length);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+data=d;
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+data=d;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
-}
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+assert (d!=null);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+assert (d!=null);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+assert (d!=null);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+assert (d!=null);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d!=null){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||"查看红包".equals(d)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||"查看红包".equals(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||"查看红包".equals(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||"查看红包".equals(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==3){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==3){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==3){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
+if(copyArray){
+copyIn(d);
+}else {
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<0||d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(true){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&copyArray){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==Long.MIN_VALUE){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==0){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length>9){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows>9){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols>9){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length<4000000){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows<4000000){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols<4000000){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6360/pattern-ver1-serial/engine.src.org.pentaho.di.trans.steps.newfileinput.NewFileInputUtils.java-convertLineToRow.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(Double.isNaN(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length!=9999){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows!=9999){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols!=9999){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols>0&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(0>0&&nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(0>0&&nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows>=0):"Receive a negative tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols>=0):"Receive a negative tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(data!=null&&(d[r].length!=nCols)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(data!=null&&(copyArray)){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(data!=null&&(d==null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(data!=null&&(nRows==0)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(data!=null&&(nCols==0)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu!=null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=0):"Receive a size tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=0):"Receive a size tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length=='"'){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows=='"'){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols=='"'){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(data!=d){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nCols=d[0].length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null&&!d.equals("")){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d==null){
+d=data;
+}else {
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+long startTime=System.currentTimeMillis();
 copyIn(d);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+long startTime=System.currentTimeMillis();
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+long startTime=System.currentTimeMillis();
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+long startTime=System.currentTimeMillis();
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
-if(d==null){
-throw new NullPointerException();
-}
- final int nRows=d.length;
-if(nRows==0){
-throw new IllegalArgumentException("Matrix must have at least one row.");
-}
- final int nCols=d[0].length;
-if(nCols==0){
-throw new IllegalArgumentException("Matrix must have at least one column.");
-}
-for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
-throw new IllegalArgumentException("All input rows must have the same length.");
-}
-}
-data=d;
-}
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 0, INS : 0, DEL : 43
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:37:17 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.getRowDimension:[947]#0.1796053020267749
Compute Candidate : 2019.09.08 AD at 02:37:30 CDT - 2019.09.08 AD at 02:41:17 CDT , PNumber : 11259, CandNumber : 13 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return this.data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return this.getRowDimension();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+this.getRowDimension();
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return (int)(data.length);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return data.length&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int a=0;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+String OUTSTRING="";
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int length=8;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int a=1;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+String length="%#.&f";
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+boolean b=true;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:41:54 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension:[956]#0.1796053020267749
Compute Candidate : 2019.09.08 AD at 02:42:07 CDT - 2019.09.08 AD at 02:45:55 CDT , PNumber : 11243, CandNumber : 15 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+this.getColumnDimension();
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return this.data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return this.getColumnDimension();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 2;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5386/pattern-ver1-serial/game.furguardians.org.pandcorps.furguardians.Level.java-getMinFlat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return data[0].length&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+int a=0;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+String OUTSTRING="";
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return (int)(data[0].length);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 4;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/1673/pattern-ver1-serial/src.stratos.game.actors.Power.java-costFor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+int a=1;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+boolean b=true;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_1]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 02:46:31 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2 | 2019.09.08 AD at 02:46:31 CDT
Location : org.apache.commons.math.linear.BigMatrixImpl.operate:[986, 989, 990, 991, 992, 993, 994, 995, 997]#0.5773502691896258
Compute Candidate : 2019.09.08 AD at 02:46:54 CDT - 2019.09.08 AD at 03:16:13 CDT , PNumber : 11313, CandNumber : 280 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+continue;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+return null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+return null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final long nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final long nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,myUid;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,myUid;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,DEFAULT_TIMEOUT2;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:16:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row>nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i>nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_SERVICE_NODES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_SERVICE_NODES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_ZK_WAIT_RETRY_TIMES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length==this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final float nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/1194/pattern-ver1-serial/src.backend.rest.SaveUserCompetences.java-saveUserCompetences.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row--){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i--){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final Integer nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final Integer nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[i][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,localLevel;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,localLevel;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length>this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,new ArrayList<KeyBinding>()){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,new ArrayList<KeyBinding>()){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].add(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ final BigDecimal[] out=new BigDecimal[(v.length)];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return v;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=out[row].add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;row++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,_afterComposeMethodCache;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,_afterComposeMethodCache;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+row++;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mActions;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mActions;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mRelationId;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mRelationId;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ int nCols=this.getColumnDimension();
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row++;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row--;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+synchronized(this){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+synchronized(this){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+operate(v);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+operate(v);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nRows=this.getRowDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,continentName,countryCode;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,continentName,countryCode;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+while(true){
+
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+while(true){
+
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,userEmail;row<nRows;row++,row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,userEmail;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+synchronized(this){
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,Charset.forName("UTF-8")){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,Charset.forName("UTF-8")){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+synchronized(this){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(this.data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null){
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+v=v;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(row==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(row==4){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(i==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]==null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=0;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=0;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=0;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=0;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(ZERO!=null){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6804/pattern-ver1-serial/HashTableProject.src.IndexedColorEncoder.java-encodeFast.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+String OUTSTRING="";
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+String OUTSTRING="";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+String OUTSTRING="";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+String OUTSTRING="";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final int nRows=getRowDimension();
+ final int nCols=getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6651/pattern-ver1-serial/library.src.main.java.com.alamkanak.weekview.WeekView.java-drawHeaderRowAndEvents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int ZERO=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int i=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(out[row].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(equals(v)){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nRows)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(equals(v)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nCols)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(equals(v)){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int indexSelection=0;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+int indexSelection=0;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+int indexSelection=0;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row-1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i-1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row-1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i-1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v.equals("sounds")){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=1;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=1;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=1;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=1;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=sum.setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean ZERO=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean i=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+boolean b=true;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+boolean b=true;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+boolean b=true;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+boolean b=true;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;Math.abs(row++)){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;Math.abs(i++)){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v!=null){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(this==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if(this==null){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nRows==this.getRowDimension()){
+return out;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(v==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+if("&null".equals(v)){
+return null;
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if("&null".equals(v)){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+if("&null".equals(nRows)){
+return null;
+}
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if("&null".equals(nCols)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if("&null".equals(out)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(out)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(sum)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals("-1")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("-1")){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==Long.MIN_VALUE){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+BigDecimal sum=ZERO;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(v==null){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null);
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v.equals(InputStream.class)){
+return out;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out.equals(InputStream.class)){
+return v;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(InputStream.class)){
+return v;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(Double.isNaN(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v!=null){
+if(v.length!=this.getColumnDimension()){
+throw new IllegalArgumentException("vector has wrong length");
+}
+ final int nRows=this.getRowDimension();
+ final int nCols=this.getColumnDimension();
+ final BigDecimal[] out=new BigDecimal[v.length];
+for(int row=0;row<nRows;row++){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
+return out;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v!=null){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=this.getRowDimension());
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=this.getColumnDimension());
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=new BigDecimal[v.length]);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=ZERO);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (v!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (v!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
+assert (v!=null);
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (out!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (sum!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals(null)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(null)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("655")){
+System.out.println();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||"查看红包".equals(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==3){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("player is not initialised, game might not be started");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("Root not directory or IO error occurred");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/7398/pattern-ver1-serial/core.src.main.java.org.infinispan.loaders.file.FileCacheStore.java-toStreamLockSafe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(nCols>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<0||v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("connection offline");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==0){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length>9){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+ final int nCols=this.getColumnDimension();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length<4000000){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length!=9999){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this.getColumnDimension()>0&&v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows>=0):"Receive a negative tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols>=0):"Receive a negative tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols>=0):"Receive a negative tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(data!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null):"Appointments day is not allowed to be null!";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null):"Appointments day is not allowed to be null!";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null):"Appointments day is not allowed to be null!";
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=0):"Receive a size tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols!=0):"Receive a size tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=0):"Receive a size tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length=='"'){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]==null?null:data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]!=null?data[row][i].multiply(v[i]):null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])==null?new BigDecimal(0):data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/3977/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TicketFareAirlineImpl.java-getDetailTicketFareAirline.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
+out[row]=sum;
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+out[row]=sum;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("User isn't registered! "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum==null){
+sum=out[row];
+}else {
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||v==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||out==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])).setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+succeeded=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+succeeded=true;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(nRows==3){
+System.out.println("debug");
+}
 sum=sum.add(data[row][i].multiply(v[i]));
+if(nRows==3){
+System.out.println("debug");
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(out[row]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+v.getClass().getName());
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nCols==0&&nRows==0&&out.equals("")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nRows+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nCols+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+long startTime=System.currentTimeMillis();
 sum=sum.add(data[row][i].multiply(v[i]));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+long startTime=System.currentTimeMillis();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+long startTime=System.currentTimeMillis();
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 10, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 03:35:14 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl:[154, 138, 139, 142, 145, 146, 149, 150, 153, 158, 160, 161]#0.22941573387056174
Compute Candidate : 2019.09.08 AD at 03:35:25 CDT - 2019.09.08 AD at 04:07:06 CDT , PNumber : 11317, CandNumber : 300 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+continue;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+return ;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+return ;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d!=null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final long nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final long nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<=nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Collection;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,myUid;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,DEFAULT_TIMEOUT2;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r>nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_SERVICE_NODES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_ZK_WAIT_RETRY_TIMES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+break;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length==nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(copyArray){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r--){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows!=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols!=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final Integer nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final Integer nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(true){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+if(d==null){
+throw new NullPointerException();
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,localLevel;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,data;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,lu;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length>nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,new ArrayList<KeyBinding>()){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=null;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,_afterComposeMethodCache;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r++;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.List;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mActions;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=data.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=lu.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mRelationId;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+copyIn(d);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==-1){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==-1){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(!copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/425/pattern-ver1-serial/app.src.main.java.com.pemws14.armyoffriends.GameMechanics.java-getPlayerLevelProgress.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+synchronized(this){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=d.clone();
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/52/pattern-ver1-serial/src.nl.esciencecenter.diffevo.ListOfParameterCombinations.java-setModelResults.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+synchronized(this){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean broadcast){
+if(broadcast){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,continentName,countryCode;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+while(true){
+
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
+while(true){
+
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,userEmail;r<nRows;r++,r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d[0]==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2172/pattern-ver1-serial/FTDriver.src.jp.ksksue.driver.serial.FTDriver.java-setFTDIEndpoints.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r--;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+synchronized(this){
 if(d==null){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+synchronized(this){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+synchronized(this){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+synchronized(this){
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+synchronized(this){
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+r++;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,Charset.forName("UTF-8")){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d.equals(null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+synchronized(this){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+synchronized(this){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+synchronized(this){
 copyIn(d);
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+copyIn(d);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+copyIn(d);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+copyIn(d);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+copyIn(d);
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+d=d;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
 copyIn(d);
+if(copyArray){
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(r==4){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(true){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(copyArray&&copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
+copyIn(d);
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu==null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(data==null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+copyIn(d);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=0;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=0;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=0;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=0;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=0;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=0;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean readOnly){
+if(!readOnly){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+String OUTSTRING="";
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String OUTSTRING="";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String OUTSTRING="";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+String OUTSTRING="";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+String OUTSTRING="";
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+String OUTSTRING="";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+copyIn(d);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+copyIn(d);
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+copyIn(d);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nCols=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nRows=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int length=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d!=null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(Double.isNaN(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(Double.isNaN(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(d)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(d)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(equals(d)){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(equals(d)){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(nCols)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(nCols)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(equals(d)){
+return ;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+int indexSelection=0;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+int indexSelection=0;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+int indexSelection=0;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nRows!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=1;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=1;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=1;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=1;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=1;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=1;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String length="%#.&f";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nCols=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nRows=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean length=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+boolean b=true;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+boolean b=true;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+boolean b=true;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+boolean b=true;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+boolean b=true;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+boolean b=true;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;Math.abs(r++)){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d==null){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
+data=d;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+lu=null;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+lu=null;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+lu=null;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+lu=null;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+lu=null;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+data=d;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+data=d;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+data=d;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+lu=null;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+data=d;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(nCols<0){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
+data=d;
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nRows=d.length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d==null){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(d==null){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
+}
+if(d==null){
+return ;
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+data=d;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null);
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+data=d;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d!=null){
+copyIn(d);
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d!=null){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(d!=null){
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d!=null){
+if(copyArray){
+copyIn(d);
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
+lu=null;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=d.length);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=d[0].length);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+data=d;
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+data=d;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
-}
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+assert (d!=null);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+assert (d!=null);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+assert (d!=null);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+assert (d!=null);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d!=null){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||"查看红包".equals(d)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||"查看红包".equals(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||"查看红包".equals(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||"查看红包".equals(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==3){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==3){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==3){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
+if(copyArray){
+copyIn(d);
+}else {
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<0||d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(true){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&copyArray){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==Long.MIN_VALUE){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==0){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length>9){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows>9){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols>9){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length<4000000){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows<4000000){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols<4000000){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6360/pattern-ver1-serial/engine.src.org.pentaho.di.trans.steps.newfileinput.NewFileInputUtils.java-convertLineToRow.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(Double.isNaN(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length!=9999){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows!=9999){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols!=9999){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols>0&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(0>0&&nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(0>0&&nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows>=0):"Receive a negative tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols>=0):"Receive a negative tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(data!=null&&(d[r].length!=nCols)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(data!=null&&(copyArray)){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(data!=null&&(d==null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(data!=null&&(nRows==0)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(data!=null&&(nCols==0)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu!=null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=0):"Receive a size tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=0):"Receive a size tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length=='"'){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows=='"'){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols=='"'){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(data!=d){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nCols=d[0].length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null&&!d.equals("")){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d==null){
+d=data;
+}else {
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+long startTime=System.currentTimeMillis();
 copyIn(d);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+long startTime=System.currentTimeMillis();
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+long startTime=System.currentTimeMillis();
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+long startTime=System.currentTimeMillis();
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
-if(d==null){
-throw new NullPointerException();
-}
- final int nRows=d.length;
-if(nRows==0){
-throw new IllegalArgumentException("Matrix must have at least one row.");
-}
- final int nCols=d[0].length;
-if(nCols==0){
-throw new IllegalArgumentException("Matrix must have at least one column.");
-}
-for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
-throw new IllegalArgumentException("All input rows must have the same length.");
-}
-}
-data=d;
-}
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 0, INS : 0, DEL : 43
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:25:58 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.getRowDimension:[947]#0.1796053020267749
Compute Candidate : 2019.09.08 AD at 04:26:11 CDT - 2019.09.08 AD at 04:29:44 CDT , PNumber : 11259, CandNumber : 13 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:29:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return this.data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return this.getRowDimension();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+this.getRowDimension();
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return (int)(data.length);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
-return data.length;
+return data.length&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int a=0;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+String OUTSTRING="";
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int length=8;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+int a=1;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+String length="%#.&f";
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[941,948]
------------Candidate---------------
 public int getRowDimension(){
+boolean b=true;
 return data.length;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:30:28 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension:[956]#0.1796053020267749
Compute Candidate : 2019.09.08 AD at 04:30:42 CDT - 2019.09.08 AD at 04:34:18 CDT , PNumber : 11243, CandNumber : 15 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+this.getColumnDimension();
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return this.data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return this.getColumnDimension();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 2;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5386/pattern-ver1-serial/game.furguardians.org.pandcorps.furguardians.Level.java-getMinFlat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return data[0].length&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+int a=0;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+String OUTSTRING="";
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return (int)(data[0].length);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
-return data[0].length;
+return 4;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/1673/pattern-ver1-serial/src.stratos.game.actors.Power.java-costFor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+int a=1;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[950,957]
------------Candidate---------------
 public int getColumnDimension(){
+boolean b=true;
 return data[0].length;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_2]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 04:34:57 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3 | 2019.09.08 AD at 04:34:57 CDT
Location : org.apache.commons.math.linear.BigMatrixImpl.operate:[986, 989, 990, 991, 992, 993, 994, 995, 997]#0.5773502691896258
Compute Candidate : 2019.09.08 AD at 04:35:24 CDT - 2019.09.08 AD at 05:01:32 CDT , PNumber : 11313, CandNumber : 279 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+continue;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+return null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+return null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final long nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final long nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,myUid;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Collection;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,myUid;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,DEFAULT_TIMEOUT2;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row>nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i>nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_SERVICE_NODES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_SERVICE_NODES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,MAX_ZK_WAIT_RETRY_TIMES;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length==this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final float nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/1194/pattern-ver1-serial/src.backend.rest.SaveUserCompetences.java-saveUserCompetences.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row--){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i--){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ final Integer nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final Integer nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[i][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,localLevel;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,localLevel;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length>this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,new ArrayList<KeyBinding>()){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,new ArrayList<KeyBinding>()){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].add(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ final BigDecimal[] out=new BigDecimal[(v.length)];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=null;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
-return out;
+return v;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=out[row].add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;row++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,_afterComposeMethodCache;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,_afterComposeMethodCache;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+row++;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mActions;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mActions;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,mRelationId;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,mRelationId;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ int nCols=this.getColumnDimension();
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row++;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i++;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<=nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<=nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+row--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+row--;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+i--;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+synchronized(this){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+synchronized(this){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+operate(v);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+operate(v);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final float nRows=this.getRowDimension();
+ final float nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,continentName,countryCode;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0,continentName,countryCode;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+while(true){
+
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+while(true){
+
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,userEmail;row<nRows;row++,row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0,userEmail;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+break;
 }
 out[row]=sum;
+break;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+synchronized(this){
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;row++,Charset.forName("UTF-8")){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;i++,Charset.forName("UTF-8")){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+synchronized(this){
 throw new IllegalArgumentException("vector has wrong length");
+}
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(this.data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null){
+continue;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
+ @SuppressWarnings("UnusedAssignment") int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
- final BigDecimal[] out=new BigDecimal[v.length];
+ @SuppressWarnings("UnusedAssignment") int nCols=this.getColumnDimension();
+ @SuppressWarnings("UnusedAssignment") BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
+ @SuppressWarnings("UnusedAssignment") BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+v=v;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(row==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(row==4){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(i==4){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]==null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=0;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=0;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=0;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=0;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(ZERO!=null){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6804/pattern-ver1-serial/HashTableProject.src.IndexedColorEncoder.java-encodeFast.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+String OUTSTRING="";
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+String OUTSTRING="";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+String OUTSTRING="";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+String OUTSTRING="";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;){
+i++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
+row++;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+row++;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
- final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
+ final int nRows=getRowDimension();
+ final int nCols=getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6651/pattern-ver1-serial/library.src.main.java.com.alamkanak.weekview.WeekView.java-drawHeaderRowAndEvents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int ZERO=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int i=5;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(out[row].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(equals(v)){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nRows)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(equals(v)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(equals(nCols)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(equals(v)){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+int indexSelection=0;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+int indexSelection=0;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+int indexSelection=0;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row-1][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i-1]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row-1]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Arrays;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i-1].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v.equals("sounds")){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("sounds")){
+continue;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+int a=1;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+int a=1;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+int a=1;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+int a=1;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
+out[row]=sum.setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean ZERO=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+boolean i=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
+boolean b=true;
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+boolean b=true;
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+boolean b=true;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+boolean b=true;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+continue;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+continue;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
-for(int row=0;row<nRows;row++){
+for(int row=0;row<nRows;Math.abs(row++)){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
-for(int i=0;i<nCols;i++){
+for(int i=0;i<nCols;Math.abs(i++)){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v!=null){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out==null){
+return null;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(this==null){
+return null;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null){
+return null;
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if(this==null){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nRows==this.getRowDimension()){
+return out;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(v==null){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(v)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+if("&null".equals(v)){
+return null;
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
+}
+if("&null".equals(v)){
+return null;
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+if("&null".equals(nRows)){
+return null;
+}
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if("&null".equals(nCols)){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if("&null".equals(out)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(nCols)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(out)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if("&null".equals(sum)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals("-1")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("-1")){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==Long.MIN_VALUE){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&false){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+BigDecimal sum=ZERO;
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
-BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+if(v==null){
+return null;
+}
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null);
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null);
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v.equals(InputStream.class)){
+return out;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(out.equals(InputStream.class)){
+return v;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(InputStream.class)){
+return v;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(Double.isNaN(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()==true){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+if(v!=null){
+if(v.length!=this.getColumnDimension()){
+throw new IllegalArgumentException("vector has wrong length");
+}
+ final int nRows=this.getRowDimension();
+ final int nCols=this.getColumnDimension();
+ final BigDecimal[] out=new BigDecimal[v.length];
+for(int row=0;row<nRows;row++){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
+return out;
+}
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+if(v!=null){
+BigDecimal sum=ZERO;
+for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
+out[row]=sum;
+}
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum!=null){
+sum=sum.add(data[row][i].multiply(v[i]));
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=this.getRowDimension());
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=this.getColumnDimension());
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=new BigDecimal[v.length]);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=ZERO);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null);
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (v!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (v!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
+assert (v!=null);
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (out!=null);
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+assert (sum!=null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out.equals(null)){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals(null)){
+return null;
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum.equals("655")){
+System.out.println();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||"查看红包".equals(v.length)){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==3){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("player is not initialised, game might not be started");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null){
+throw new IllegalArgumentException("Root not directory or IO error occurred");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/7398/pattern-ver1-serial/core.src.main.java.org.infinispan.loaders.file.FileCacheStore.java-toStreamLockSafe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(nCols>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length<0||v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+out[row]=sum;
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length==0){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length>9){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
- final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+ final int nCols=this.getColumnDimension();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length<4000000){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()&&v.length!=9999){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this.getColumnDimension()>0&&v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows>=0):"Receive a negative tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols>=0):"Receive a negative tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols>=0):"Receive a negative tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(data!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (v!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:17:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+assert (v!=null):"Appointments day is not allowed to be null!";
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (out!=null):"Appointments day is not allowed to be null!";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+assert (out!=null):"Appointments day is not allowed to be null!";
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+assert (sum!=null):"Appointments day is not allowed to be null!";
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+assert (sum!=null):"Appointments day is not allowed to be null!";
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+assert (nRows!=0):"Receive a size tratment";
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+assert (nCols!=0):"Receive a size tratment";
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+assert (nCols!=0):"Receive a size tratment";
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(v.length!=this.getColumnDimension()||v.length=='"'){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
-if(v.length!=this.getColumnDimension()){
+if(this!=null&&(v.length!=this.getColumnDimension())){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]==null?null:data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i]!=null?data[row][i].multiply(v[i]):null);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])==null?new BigDecimal(0):data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/3977/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TicketFareAirlineImpl.java-getDetailTicketFareAirline.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
+out[row]=sum;
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+out[row]=sum;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+out[row]=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("User isn't registered! "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum==null){
+sum=out[row];
+}else {
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+}
+if(out==null){
+throw new IllegalArgumentException("Could not find user with id "+v);
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5858/pattern-ver1-serial/chpl.chpl-service.src.main.java.gov.healthit.chpl.web.controller.UserManagementController.java-deleteUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=null;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||v==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+}
+if(sum==null||out==null){
+throw new IllegalArgumentException();
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(v==null||sum==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(sum==null||v==null){
+throw new IllegalArgumentException();
+}
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
-sum=sum.add(data[row][i].multiply(v[i]));
+sum=sum.add(data[row][i].multiply(v[i])).setScale(2,BigDecimal.ROUND_HALF_UP);
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/766/pattern-ver1-serial/BarbarianTheater.src.theater.Client.java-Client.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+succeeded=true;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
+boolean succeeded=false;
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(!succeeded){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
+succeeded=true;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+if(nRows==3){
+System.out.println("debug");
+}
 sum=sum.add(data[row][i].multiply(v[i]));
+if(nRows==3){
+System.out.println("debug");
+}
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
+if(out[row]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+v.getClass().getName());
+}
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+sum=sum.add(data[row][i].multiply(v[i]));
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(nCols==0&&nRows==0&&out.equals("")){
+return null;
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(sum!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nRows+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
+if(out==null){
+throw new IllegalArgumentException("Can not found requested dataSource ["+nCols+"], for device ["+v+"].");
+}
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
+long startTime=System.currentTimeMillis();
 sum=sum.add(data[row][i].multiply(v[i]));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
+long startTime=System.currentTimeMillis();
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
+long startTime=System.currentTimeMillis();
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
 out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
+if(out[row]!=null){
 out[row]=sum;
+}
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 3, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[978,1000]
------------Candidate---------------
 public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException{
 if(v.length!=this.getColumnDimension()){
 throw new IllegalArgumentException("vector has wrong length");
 }
  final int nRows=this.getRowDimension();
  final int nCols=this.getColumnDimension();
  final BigDecimal[] out=new BigDecimal[v.length];
 for(int row=0;row<nRows;row++){
 BigDecimal sum=ZERO;
 for(int i=0;i<nCols;i++){
 sum=sum.add(data[row][i].multiply(v[i]));
 }
-out[row]=sum;
 }
 return out;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 10, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:19:36 CDT
--------------- END -----------------
Location : org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl:[154, 138, 139, 142, 145, 146, 149, 150, 153, 158, 160, 161]#0.22941573387056174
Compute Candidate : 2019.09.08 AD at 05:19:48 CDT - 2019.09.08 AD at 05:49:45 CDT , PNumber : 11317, CandNumber : 300 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+continue;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+return ;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+return ;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d!=null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final long nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final long nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<=nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Collection;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,myUid;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,DEFAULT_TIMEOUT2;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r>nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_SERVICE_NODES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,MAX_ZK_WAIT_RETRY_TIMES;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+break;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length==nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(copyArray){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r--){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows!=0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols!=0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final Integer nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final Integer nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(true){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+if(d==null){
+throw new NullPointerException();
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,localLevel;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,data;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,lu;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows>0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols>0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length>nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,new ArrayList<KeyBinding>()){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=null;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,_afterComposeMethodCache;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r++;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.List;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mActions;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=data.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final int nRows=lu.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,mRelationId;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+copyIn(d);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==-1){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Iterator;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==-1){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(!copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final double nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final double nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/425/pattern-ver1-serial/app.src.main.java.com.pemws14.armyoffriends.GameMechanics.java-getPlayerLevelProgress.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+synchronized(this){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
+data=d.clone();
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/52/pattern-ver1-serial/src.nl.esciencecenter.diffevo.ListOfParameterCombinations.java-setModelResults.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+synchronized(this){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
+ final float nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
+ final float nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean broadcast){
+if(broadcast){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,continentName,countryCode;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+while(true){
+
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
+while(true){
+
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1,userEmail;r<nRows;r++,r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d[0]==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2172/pattern-ver1-serial/FTDriver.src.jp.ksksue.driver.serial.FTDriver.java-setFTDIEndpoints.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+r--;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+synchronized(this){
 if(d==null){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+synchronized(this){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+synchronized(this){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+synchronized(this){
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+synchronized(this){
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+r++;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;r++,Charset.forName("UTF-8")){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d.equals(null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+synchronized(this){
 throw new IllegalArgumentException("All input rows must have the same length.");
+}
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+synchronized(this){
 throw new NullPointerException();
+}
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+synchronized(this){
 copyIn(d);
+}
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one row.");
+}
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+synchronized(this){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+copyIn(d);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+copyIn(d);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+copyIn(d);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+copyIn(d);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+copyIn(d);
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+d=d;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols+nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
 copyIn(d);
+if(copyArray){
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(r==4){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(true){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(true){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(copyArray&&copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
+copyIn(d);
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu==null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(data==null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+copyIn(d);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=0;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=0;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=0;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=0;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=0;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=0;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=0;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
-public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+public BigMatrixImpl(BigDecimal[][] d,boolean readOnly){
+if(!readOnly){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+String OUTSTRING="";
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String OUTSTRING="";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String OUTSTRING="";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+String OUTSTRING="";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+String OUTSTRING="";
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+String OUTSTRING="";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+String OUTSTRING="";
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+copyIn(d);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+copyIn(d);
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+copyIn(d);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;){
+r++;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+copyIn(d);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nCols=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int nRows=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int length=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d!=null){
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(Double.isNaN(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(Double.isNaN(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(d)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(d)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(equals(d)){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(equals(d)){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(equals(nCols)){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(equals(nCols)){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(equals(d)){
+return ;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+int indexSelection=0;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+int indexSelection=0;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+int indexSelection=0;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nRows!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+int a=1;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+int a=1;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+int a=1;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+int a=1;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+int a=1;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+int a=1;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+int a=1;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String length="%#.&f";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nCols=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean nRows=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+boolean length=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+boolean b=true;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+boolean b=true;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+boolean b=true;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+boolean b=true;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+boolean b=true;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+boolean b=true;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+boolean b=true;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+continue;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+copyIn(d);
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
+copyIn(d);
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+copyIn(d);
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+copyIn(d);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
-for(int r=1;r<nRows;r++){
+for(int r=1;r<nRows;Math.abs(r++)){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d==null){
+return ;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
+data=d;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+lu=null;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+lu=null;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+lu=null;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+lu=null;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
+lu=null;
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+lu=null;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
+data=d;
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
+data=d;
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+data=d;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+data=d;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+lu=null;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+data=d;
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(nCols<0){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==Long.MIN_VALUE){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
+data=d;
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nRows=d.length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
- final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d==null){
+return ;
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d==null){
+return ;
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+if(d==null){
+return ;
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
+}
+if(d==null){
+return ;
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+try{
 lu=null;
+}finally{
+data=d;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null);
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null);
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null);
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null);
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
-data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+data=d;
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+data=d;
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+if(d!=null){
+copyIn(d);
+}
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+if(d!=null){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+if(d!=null){
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+if(d!=null){
+if(copyArray){
+copyIn(d);
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+data=d;
+}
+lu=null;
+}
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=d.length);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=d[0].length);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+data=d;
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+data=d;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
-}
 }
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+assert (d!=null);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+assert (d!=null);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
+assert (d!=null);
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+assert (d!=null);
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(d==null){
-throw new NullPointerException();
+throw new NullPointerException(indexClassList);
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d!=null){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||"查看红包".equals(d)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||"查看红包".equals(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||"查看红包".equals(nRows)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||"查看红包".equals(nCols)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==3){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==3){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==3){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
+if(copyArray){
+copyIn(d);
+}else {
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length<0||d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows<0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols<0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(true){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&copyArray){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==Long.MIN_VALUE){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length==0){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length>9){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows>9){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols>9){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length<4000000){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows<4000000){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols<4000000){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
-copyIn(d);
-}else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
+}else {
+if(d==null){
+throw new NullPointerException();
+}
+ final int nRows=d.length;
+if(nRows==0){
+throw new IllegalArgumentException("Matrix must have at least one row.");
+}
+ final int nCols=d[0].length;
+if(nCols==0){
+throw new IllegalArgumentException("Matrix must have at least one column.");
+}
+for(int r=1;r<nRows;r++){
+if(d[r].length!=nCols){
+throw new IllegalArgumentException("All input rows must have the same length.");
+}
+}
+copyIn(d);
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(r!=nCols&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6360/pattern-ver1-serial/engine.src.org.pentaho.di.trans.steps.newfileinput.NewFileInputUtils.java-convertLineToRow.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null||d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(Double.isNaN(d[r].length)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols&&d[r].length!=9999){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0&&nRows!=9999){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0&&nCols!=9999){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(nCols>0&&d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(0>0&&nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(0>0&&nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows>=0):"Receive a negative tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols>=0):"Receive a negative tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(data!=null&&(d[r].length!=nCols)){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
+if(data!=null&&(copyArray)){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(data!=null&&(d==null)){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(data!=null&&(nRows==0)){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(data!=null&&(nCols==0)){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/4950/pattern-ver1-serial/src.org.mariotaku.gallery3d.ImageViewerGLActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(lu!=null){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+assert (d!=null):"Appointments day is not allowed to be null!";
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
+assert (nRows!=0):"Receive a size tratment";
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
+assert (nCols!=0):"Receive a size tratment";
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
+if(d[r].length!=nCols||d[r].length=='"'){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
-if(nRows==0){
+if(nRows==0||nRows=='"'){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
-if(nCols==0){
+if(nCols==0||nCols=='"'){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
+if(data!=d){
 lu=null;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+ final int nCols=d[0].length;
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
- final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
-if(d==null){
+if(d==null&&!d.equals("")){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
+if(d==null){
+d=data;
+}else {
 data=d;
+}
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
-lu=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
+long startTime=System.currentTimeMillis();
 copyIn(d);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
+long startTime=System.currentTimeMillis();
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
+long startTime=System.currentTimeMillis();
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
 if(copyArray){
 copyIn(d);
 }else {
 if(d==null){
 throw new NullPointerException();
 }
  final int nRows=d.length;
 if(nRows==0){
 throw new IllegalArgumentException("Matrix must have at least one row.");
 }
  final int nCols=d[0].length;
 if(nCols==0){
 throw new IllegalArgumentException("Matrix must have at least one column.");
 }
 for(int r=1;r<nRows;r++){
+long startTime=System.currentTimeMillis();
 if(d[r].length!=nCols){
 throw new IllegalArgumentException("All input rows must have the same length.");
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 data=d;
 }
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_98_buggy/src/java/org/apache/commons/math/linear/BigMatrixImpl.java[123,161]
------------Candidate---------------
 public BigMatrixImpl(BigDecimal[][] d,boolean copyArray){
-if(copyArray){
-copyIn(d);
-}else {
-if(d==null){
-throw new NullPointerException();
-}
- final int nRows=d.length;
-if(nRows==0){
-throw new IllegalArgumentException("Matrix must have at least one row.");
-}
- final int nCols=d[0].length;
-if(nCols==0){
-throw new IllegalArgumentException("Matrix must have at least one column.");
-}
-for(int r=1;r<nRows;r++){
-if(d[r].length!=nCols){
-throw new IllegalArgumentException("All input rows must have the same length.");
-}
-}
-data=d;
-}
 lu=null;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 0, INS : 0, DEL : 43
Failing Tests:[org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_3]
---------START : 2019.09.08 AD at 00:57:52 CDT
---------TIME : 2019.09.08 AD at 05:58:32 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math.linear.BigMatrixImplTest::testMath209_purify_4 | 2019.09.08 AD at 05:58:32 CDT
Current failed test : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_1 | 2019.09.08 AD at 05:58:46 CDT
Current failed test : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_2 | 2019.09.08 AD at 05:59:01 CDT
Current failed test : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_3 | 2019.09.08 AD at 05:59:16 CDT
Current failed test : org.apache.commons.math.linear.RealMatrixImplTest::testMath209_purify_4 | 2019.09.08 AD at 05:59:30 CDT
Finish : math-98 > patch : 0 | Start : Sun Sep 08 00:57:52 CDT 2019 | End : 2019.09.08 AD at 05:59:45 CDT
