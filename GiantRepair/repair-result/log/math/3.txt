Repair : math_3
Current failed test : org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray | 2019.09.04 AD at 14:21:23 CDT
Location : org.apache.commons.math3.util.MathArrays.linearCombination:[816, 817, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 841, 845, 846]#0.2886751345948129
Compute Candidate : 2019.09.04 AD at 14:25:27 CDT - 2019.09.04 AD at 15:40:13 CDT , PNumber : 11404, CandNumber : 400 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
-double prodLowSum=0;
+ double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
- final double ca=SPLIT_FACTOR*ai;
+ double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
- final double aLow=ai-aHigh;
+ double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
- final double bLow=bi-bHigh;
+ double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=1;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;prodLowSum<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;prodHigh[i]<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=0;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<=len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Collection;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,myUid;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i>len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,MAX_SERVICE_NODES;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len==b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(len-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(prodLowSum-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(i-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ai-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=3;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;i--){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
-double sHighPrev=prodHighCur+prodHighNext;
+double sHighPrev=prodHighCur+len;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
-double sHighPrev=prodHighCur+prodHighNext;
+double sHighPrev=prodHighCur+prodLowSum;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
- final double prodHighCur=prodHigh[0];
+ final double prodHighCur=prodHigh[1];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ final double ai=a[1];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ final double bi=b[1];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[1]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[1]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ final Integer len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+return 0;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ca-2);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
- final double aLow=ai-aHigh;
+ final double aLow=ai-2;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,localLevel;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,result;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,sHighPrev;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
-double prodHighNext=prodHigh[1];
+double prodHighNext=prodHigh[0];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ final double ai=a[0];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ final double bi=b[0];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[0]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[0]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len<b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=10;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
-double prodHighNext=prodHigh[1];
+double prodHighNext=prodHigh[2];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ final double ai=a[2];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ final double bi=b[2];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[2]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[2]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
- final double prodHighCur=prodHigh[0];
+ final double prodHighCur=prodHigh[2];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
-return result;
+return len;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
-return result;
+return prodLowSum;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ca-len);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ca-prodLowSum);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ca-i);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-(ca-ca);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len>b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;i++,new ArrayList<KeyBinding>()){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=100;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ final double[] prodHigh=new double[(len)];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=0.0;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
- final double ca=SPLIT_FACTOR*ai;
+ final double ca=prodHigh[i]*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
- final double cb=SPLIT_FACTOR*bi;
+ final double cb=prodHigh[i]*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=prodHigh[i]*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=prodHigh[i]*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-prodHigh[i]*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-prodHigh[i]*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-prodHigh[i]*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
-result+=a[i]*b[i];
+result+=a[len]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
-return result;
+return prodHighCur;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;prodLowSum++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
-double prodLowSum=0;
+int prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/4536/pattern-ver1-serial/src.azdblab.executable.Main.java-runExperiment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=len;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=prodLowSum;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,_afterComposeMethodCache;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
-double prodLowSum=0;
+float prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+i++;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.List;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,mActions;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
- final double sHighCur=sHighPrev+prodHighNext;
+ final double sHighCur=sHighPrev+len;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
- final double sHighCur=sHighPrev+prodHighNext;
+ final double sHighCur=sHighPrev+prodLowSum;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
- final double sHighCur=sHighPrev+prodHighNext;
+ final double sHighCur=sHighPrev+i;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=len;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLowSum;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=i;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=aHigh;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=ai;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=ca;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
-for(int i=0;i<len;++i){
+for(int i=0;i<len;++prodLowSum){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
-double sHighPrev=prodHighCur+prodHighNext;
+double sHighPrev=prodHighCur-prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/3195/pattern-ver1-serial/src.org.compevol.ssgd.HKYSkylineIntegrator.java-transversionH.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ final int len=b.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;i++,new ArrayList<>()){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,mRelationId;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=4;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=5;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=-1;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
-double prodLowSum=0;
+ double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
-double result=sHighPrev+(prodLowSum+sLowSum);
+ double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
- final double prodHighCur=prodHigh[0];
+ double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
-double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+ double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
+prodLowSum++;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+prodLowSum++;
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
+prodLowSum++;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<=len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
-for(int i=0;i<len;++i){
+for(int i=0;i<=len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<=len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
-for(int i=1;i<lenMinusOne;i++){
+for(int i=1;i<=lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+prodLowSum--;
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
-result+=a[i]*b[i];
+result+=prodHigh[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<1;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
-for(int i=0;i<len;++i){
+for(int i=0;i<1;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,continentName,countryCode;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0,userEmail;i<len;i++,i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;i++,i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
-for(int i=1;i<lenMinusOne;i++){
+for(int i=1,userEmail;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
+i--;
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+i++;
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
+i++;
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
+i++;
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=(ca)+(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-((ca)+ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
- final double aLow=ai-aHigh;
+ final double aLow=(ai)+aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=(cb)+(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;i++,Charset.forName("UTF-8")){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=-1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=0;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
+if(ai*bi!=0){
 prodHigh[i]=ai*bi;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+if(prodLow!=0){
 prodLowSum+=prodLow;
+}
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-ca-ai*100;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=cb-cb-bi*100;
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
-double prodLowSum=0;
+ @SuppressWarnings("UnusedAssignment") double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ @SuppressWarnings("UnusedAssignment") double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ @SuppressWarnings("UnusedAssignment") double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
-double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+ @SuppressWarnings("UnusedAssignment") double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ @SuppressWarnings("UnusedAssignment") double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
-double result=sHighPrev+(prodLowSum+sLowSum);
+ @SuppressWarnings("UnusedAssignment") double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ @SuppressWarnings("UnusedAssignment") double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
-double prodLowSum=0;
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ @SuppressWarnings("UnusedAssignment") double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
- final int len=a.length;
+ @SuppressWarnings("UnusedAssignment") int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
- final double[] prodHigh=new double[len];
+ @SuppressWarnings("UnusedAssignment") double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ @SuppressWarnings("UnusedAssignment") double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=2;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=3;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+a=a;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+b=b;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+if(i==4){
+continue;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(true){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-2;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-2)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=cb-2;
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-2);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*len;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*prodLowSum;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*i;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*ai;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*ca;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*aHigh;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*aLow;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
+Arrays.sort(prodHigh);
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+Arrays.sort(prodHigh);
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+Arrays.sort(prodHigh);
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=len;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=prodLowSum;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=i;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ca;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=aHigh;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=aLow;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=10;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-ca-ai*5;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=cb-cb-bi*5;
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+if(prodLow==0.0){
+continue;
+}
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
+if(ai==0.0){
+continue;
+}
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
+if(bi==0.0){
+continue;
+}
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+String OUTSTRING="";
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+String OUTSTRING="";
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+String OUTSTRING="";
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=100;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;){
+i++;
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
+int SPLIT_FACTOR=5;
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=0.0;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(Double.isNaN(len)){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
-double result=sHighPrev+(prodLowSum+sLowSum);
+double result=sHighPrev+prodLowSum;
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-ca;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
-double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+double sLowSum=(prodHighNext-(sHighPrev-sPrime))+prodHighCur;
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=cb-cb;
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1.0*ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-1.0*aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-1.0*aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=1.0*aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-1.0*aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;Math.abs(i++)){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+double length=8;
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+double SPLIT_FACTOR=8;
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+int indexSelection=0;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+int indexSelection=0;
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
- final double ai=a[i];
+ final double ai=a[i-1];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
- final double bi=b[i];
+ final double bi=b[i-1];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i-1]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-(((prodHigh[i-1]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
- final double prodHighCur=prodHigh[0];
+ final double prodHighCur=prodHigh[0-1];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Arrays;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
-double prodHighNext=prodHigh[1];
+double prodHighNext=prodHigh[1-1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(a.equals("sounds")){
+continue;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+if(prodHigh.equals("sounds")){
+continue;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLowSum+prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+String length="%#.&f";
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+boolean SPLIT_FACTOR=true;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
-double result=sHighPrev+(prodLowSum+sLowSum);
+double result=sHighPrev+len;
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(a==null){
+continue;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(b==null){
+continue;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
+if(prodHigh==null){
+continue;
+}
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(prodHigh==null){
+continue;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
-return result;
+return result+len;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
-return result;
+return result+prodLowSum;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=4;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3908/pattern-ver1-serial/Solar.SolarSysm.src.com.callumcarmicheal.solar.objects.Earth.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=5;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2611/pattern-ver1-serial/app.src.main.java.com.example.ywn.escapeproject.FiniteStateMachine.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((((prodHigh[i])+aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+if(prodHigh==null){
+return 0d;
+}
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
+if(ai==a[i]){
+return ca;
+}
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
+if(ai==a[i]){
+return cb;
+}
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+if(aHigh==ca-(ca-ai)){
+return ca;
+}
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
+if(aHigh==ca-(ca-ai)){
+return cb;
+}
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
+if(ca==SPLIT_FACTOR*ai){
+return cb;
+}
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+if(ai==a[i]){
+return prodLow;
+}
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+if(ai==a[i]){
+return aHigh;
+}
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
+if(ai==a[i]){
+return bHigh;
+}
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+if(aHigh==ca-(ca-ai)){
+return ai;
+}
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+if(ca==SPLIT_FACTOR*ai){
+return prodLow;
+}
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+if(b==null){
+return 0d;
+}
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(a==null){
+return 0d;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+if(prodHigh==null){
+return 0d;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+if("index".equals(b)){
+return 0;
+}
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+if("index".equals(len)){
+return 0;
+}
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+if("index".equals(len)){
+return 0;
+}
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if("index".equals(a)){
+return 0;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if("index".equals(b)){
+return 0;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+if("index".equals(a)){
+return 0;
+}
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+if("index".equals(b)){
+return 0;
+}
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if("index".equals(prodHigh)){
+return 0;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
+if("index".equals(a)){
+return 0;
+}
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
+if("index".equals(b)){
+return 0;
+}
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
+if(len<0){
+return 0d;
+}
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
+}
+if(len<0){
+return 0d;
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
+if(ai<0){
+return 0d;
+}
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+if(prodHigh.equals("-1")){
+return 0d;
+}
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||len==Long.MIN_VALUE){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+if(a==null){
+return 0d;
+}
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
+if(b==null){
+return 0d;
+}
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+assert (b!=null);
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+assert (a!=null);
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+assert (b!=null);
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+assert (prodHigh!=null);
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+assert (prodHigh!=null);
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+assert (a!=null);
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+assert (b!=null);
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+if(a.equals(InputStream.class)){
+return len;
+}
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+if(b.equals(InputStream.class)){
+return len;
+}
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+if(a!=null){
+ final int len=a.length;
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
+ final double[] prodHigh=new double[len];
+double prodLowSum=0;
+for(int i=0;i<len;i++){
+ final double ai=a[i];
+ final double ca=SPLIT_FACTOR*ai;
+ final double aHigh=ca-(ca-ai);
+ final double aLow=ai-aHigh;
+ final double bi=b[i];
+ final double cb=SPLIT_FACTOR*bi;
+ final double bHigh=cb-(cb-bi);
+ final double bLow=bi-bHigh;
+prodHigh[i]=ai*bi;
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+prodLowSum+=prodLow;
+}
+ final double prodHighCur=prodHigh[0];
+double prodHighNext=prodHigh[1];
+double sHighPrev=prodHighCur+prodHighNext;
+double sPrime=sHighPrev-prodHighNext;
+double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+ final int lenMinusOne=len-1;
+for(int i=1;i<lenMinusOne;i++){
+prodHighNext=prodHigh[i+1];
+ final double sHighCur=sHighPrev+prodHighNext;
+sPrime=sHighCur-prodHighNext;
+sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
+sHighPrev=sHighCur;
+}
+double result=sHighPrev+(prodLowSum+sLowSum);
+if(Double.isNaN(result)){
+result=0;
+for(int i=0;i<len;++i){
+result+=a[i]*b[i];
+}
+}
+return result;
+}
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+if(b!=null){
+ final int len=a.length;
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
+ final double[] prodHigh=new double[len];
+double prodLowSum=0;
+for(int i=0;i<len;i++){
+ final double ai=a[i];
+ final double ca=SPLIT_FACTOR*ai;
+ final double aHigh=ca-(ca-ai);
+ final double aLow=ai-aHigh;
+ final double bi=b[i];
+ final double cb=SPLIT_FACTOR*bi;
+ final double bHigh=cb-(cb-bi);
+ final double bLow=bi-bHigh;
+prodHigh[i]=ai*bi;
+ final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+prodLowSum+=prodLow;
+}
+ final double prodHighCur=prodHigh[0];
+double prodHighNext=prodHigh[1];
+double sHighPrev=prodHighCur+prodHighNext;
+double sPrime=sHighPrev-prodHighNext;
+double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+ final int lenMinusOne=len-1;
+for(int i=1;i<lenMinusOne;i++){
+prodHighNext=prodHigh[i+1];
+ final double sHighCur=sHighPrev+prodHighNext;
+sPrime=sHighCur-prodHighNext;
+sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
+sHighPrev=sHighCur;
+}
+double result=sHighPrev+(prodLowSum+sLowSum);
+if(Double.isNaN(result)){
+result=0;
+for(int i=0;i<len;++i){
+result+=a[i]*b[i];
+}
+}
+return result;
+}
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+if(prodHigh[i]==0){
+return 0d;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+if(prodLowSum==0){
+return 0d;
+}
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+}
+if(prodLowSum==0){
+return 0d;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+}
 }
+if(result==0){
+return 0d;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sHighPrev==0){
+return 0d;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sPrime==0){
+return 0d;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(prodHighNext==0){
+return 0d;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sLowSum==0){
+return 0d;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
- final double ca=SPLIT_FACTOR*ai;
+ final double ca=(double)SPLIT_FACTOR*(double)ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
- final double cb=SPLIT_FACTOR*bi;
+ final double cb=(double)SPLIT_FACTOR*(double)bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=ca-((double)ca-(double)ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
- final double aLow=ai-aHigh;
+ final double aLow=(double)ai-(double)aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=cb-((double)cb-(double)bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
- final double bLow=bi-bHigh;
+ final double bLow=(double)bi-(double)bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=(double)ai*(double)bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<-1;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
-for(int i=0;i<len;++i){
+for(int i=0;i<-1;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
+assert (len!=a.length);
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+assert (prodHigh!=new double[len]);
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
+assert (prodLowSum!=0);
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
+assert (ai!=a[i]);
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
+assert (bi!=b[i]);
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
+assert (aLow!=ai-aHigh);
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
+assert (bLow!=bi-bHigh);
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+assert (aHigh!=ca-(ca-ai));
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
+assert (bHigh!=cb-(cb-bi));
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
-prodHighNext=prodHigh[i+1];
+prodHighNext=prodHighNext+prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (a!=null);
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (b!=null);
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
+assert (prodHigh!=null);
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
+assert (a!=null);
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
+assert (b!=null);
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+assert (a!=null);
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+assert (b!=null);
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
+assert (a!=null);
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
+assert (b!=null);
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
-for(int i=0;i<len;i++){
+for(int i=0;i<len;Math.max(i++,0)){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi+1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=1;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow+1;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=1;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi+1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
-sHighPrev=sHighCur;
+sHighPrev=1;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow+1;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
-sHighPrev=sHighCur;
+sHighPrev=1;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||"查看红包".equals(len)){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||len==3){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len<0||len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=(ai*bi+bi)%bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=(prodLow+prodLow)%prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow<0?0:prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||len==0){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 15:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||len>9){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
-double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
+double sLowSum=prodHighNext+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length&&len<4000000){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
+Double pcb=new Double(result);
+if(pcb.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sPrime<=0){
+return -1;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(prodHighNext<=0){
+return -1;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length&&len!=9999){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(b.length>0&&len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+assert (len>=0):"Receive a negative tratment";
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (len>=0):"Receive a negative tratment";
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
+assert (len>=0):"Receive a negative tratment";
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
- final double aHigh=ca-(ca-ai);
+ final double aHigh=(double)ca-(double)(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
- final double bHigh=cb-(cb-bi);
+ final double bHigh=(double)cb-(double)(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+assert (b!=null):"Appointments day is not allowed to be null!";
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+assert (a!=null):"Appointments day is not allowed to be null!";
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+assert (b!=null):"Appointments day is not allowed to be null!";
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
+assert (a!=null):"Appointments day is not allowed to be null!";
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
+assert (b!=null):"Appointments day is not allowed to be null!";
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (a!=null):"Appointments day is not allowed to be null!";
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (b!=null):"Appointments day is not allowed to be null!";
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
+assert (len!=0):"Receive a size tratment";
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
+assert (len!=0):"Receive a size tratment";
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
+assert (len!=0):"Receive a size tratment";
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
+if(len!=b.length||len=='"'){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh*100-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+if(prodHigh[i]<0){
+prodHigh[i]=0;
+}
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+if(prodLowSum<0){
+prodLowSum=0;
+}
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+}
+if(prodLowSum<0){
+prodLowSum=0;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+}
 }
+if(result<0){
+result=0;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sHighPrev<0){
+sHighPrev=0;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sPrime<0){
+sPrime=0;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(prodHighNext<0){
+prodHighNext=0;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sLowSum<0){
+sLowSum=0;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh*5-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
-sHighPrev=sHighCur;
+sHighPrev=sHighCur*2;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*2;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
-sPrime=sHighCur-prodHighNext;
+sPrime=sHighCur-prodHighNext*2;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=0*2;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
+sPrime=sHighCur-prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/2177/pattern-ver1-serial/app.src.main.java.com.kshitij.android.clickme.ui.PhotoFeedActivity.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=Math.pow(10.0,prodLow/20.0);
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sPrime<=0){
+sPrime=prodHighNext;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sLowSum<=0){
+sLowSum=sPrime;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
+}
+if(sLowSum<=0){
+sLowSum=prodHighNext;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
-result=0;
+result=0+1;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
-sPrime=sHighCur-prodHighNext;
+sPrime=sHighCur-prodHighNext+1;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
-sHighPrev=sHighCur;
+sHighPrev=sHighCur+1;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow+1;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
-throw new DimensionMismatchException(len,b.length);
-}
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+}
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
-throw new DimensionMismatchException(len,b.length);
-}
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
-throw new DimensionMismatchException(len,b.length);
-}
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
+prodHighNext=prodHigh[i+1];
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
-throw new DimensionMismatchException(len,b.length);
-}
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
-if(len!=b.length){
-throw new DimensionMismatchException(len,b.length);
-}
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
+if(len!=b.length){
+throw new DimensionMismatchException(len,b.length);
+}
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
-prodHighNext=prodHigh[i+1];
+prodHighNext=prodHigh[i+1]*2;
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=ai*bi*2;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
-prodHighNext=prodHigh[i+1];
+prodHighNext=prodHigh[i+1]*2;
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+try{
 prodLowSum+=prodLow;
+}finally{
+prodHigh[i]=ai*bi;
+}
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
-prodHighNext=prodHigh[i+1];
+prodHighNext=prodHigh[i+1]+1;
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((((prodHigh[i]-aHigh*bHigh))+aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
-result+=a[i]*b[i];
+result+=a[i]*b[i]*2;
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+if(prodHigh[i]!=ai*bi){
 prodLowSum+=prodLow;
+}
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
+boolean haveBreadCrumbs=false;
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
+haveBreadCrumbs=true;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
+if(Double.isNaN(result)&&haveBreadCrumbs){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
+boolean haveBreadCrumbs=false;
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
+haveBreadCrumbs=true;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
+if(Double.isNaN(result)&&haveBreadCrumbs){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
+boolean haveBreadCrumbs=false;
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
+if(Double.isNaN(result)&&haveBreadCrumbs){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
+haveBreadCrumbs=true;
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
+boolean haveBreadCrumbs=false;
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
+if(Double.isNaN(result)&&haveBreadCrumbs){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
+haveBreadCrumbs=true;
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh)-aLow*bHigh*100-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh)-aLow*bHigh*5-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((((prodHigh[i]-aHigh*bHigh)-aLow*bHigh))+aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(a==null||b==null||prodHigh==null){
+return 0d;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+if(a==null||prodHigh==null||b==null){
+return 0d;
+}
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
-prodLowSum+=prodLow;
+prodLowSum+=prodLow*2;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
-sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
+sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime)*2;
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
+sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
-prodHigh[i]=ai*bi;
+prodHigh[i]=1;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
-sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
+sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime)+1;
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
+long startTime=System.currentTimeMillis();
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
+long startTime=System.currentTimeMillis();
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow*100;
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=aLow*bLow-((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow*5;
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
+prodHigh[28]=(byte)0x88;
+prodHigh[29]=0x58;
+prodHigh[30]=0x01;
+prodHigh[31]=0x00;
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+prodHigh[28]=(byte)0x88;
+prodHigh[29]=0x58;
+prodHigh[30]=0x01;
+prodHigh[31]=0x00;
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
- final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
+ final double prodLow=(double)aLow*bLow-(double)(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
+prodHigh[i]=Math.round(prodHigh[i]*100.0)/100.0;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
+prodLowSum=Math.round(prodLowSum*100.0)/100.0;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
+for(int i=0;i<4;i++){
+prodHigh[i]=Math.min(1,Math.max(0,prodHigh[i]));
+}
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
 if(Double.isNaN(result)){
 result=0;
 for(int i=0;i<len;++i){
 result+=a[i]*b[i];
 }
 }
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_3_buggy/src/main/java/org/apache/commons/math3/util/MathArrays.java[797,872]
------------Candidate---------------
 public static double linearCombination(double[] a,double[] b) throws DimensionMismatchException{
  final int len=a.length;
 if(len!=b.length){
 throw new DimensionMismatchException(len,b.length);
 }
  final double[] prodHigh=new double[len];
 double prodLowSum=0;
 for(int i=0;i<len;i++){
  final double ai=a[i];
  final double ca=SPLIT_FACTOR*ai;
  final double aHigh=ca-(ca-ai);
  final double aLow=ai-aHigh;
  final double bi=b[i];
  final double cb=SPLIT_FACTOR*bi;
  final double bHigh=cb-(cb-bi);
  final double bLow=bi-bHigh;
 prodHigh[i]=ai*bi;
  final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
 prodLowSum+=prodLow;
 }
  final double prodHighCur=prodHigh[0];
 double prodHighNext=prodHigh[1];
 double sHighPrev=prodHighCur+prodHighNext;
 double sPrime=sHighPrev-prodHighNext;
 double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
  final int lenMinusOne=len-1;
 for(int i=1;i<lenMinusOne;i++){
 prodHighNext=prodHigh[i+1];
  final double sHighCur=sHighPrev+prodHighNext;
 sPrime=sHighCur-prodHighNext;
 sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
 sHighPrev=sHighCur;
 }
 double result=sHighPrev+(prodLowSum+sLowSum);
-if(Double.isNaN(result)){
-result=0;
-for(int i=0;i<len;++i){
-result+=a[i]*b[i];
-}
-}
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 0, DEL : 21
Failing Tests:[org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray]
---------START : 2019.09.04 AD at 14:21:23 CDT
---------TIME : 2019.09.04 AD at 16:05:15 CDT
--------------- END -----------------
Finish : math-3 > patch : 0 | Start : Wed Sep 04 14:21:23 CDT 2019 | End : 2019.09.04 AD at 16:05:16 CDT
