Repair : math_69
Current failed test : org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero | 2019.09.07 AD at 02:30:54 CDT
Location : org.apache.commons.math.stat.correlation.PearsonsCorrelation.PearsonsCorrelation:[68, 69]#1.0
Compute Candidate : 2019.09.07 AD at 02:31:28 CDT - 2019.09.07 AD at 02:34:40 CDT , PNumber : 11277, CandNumber : 13 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
-this(new BlockRealMatrix(data));
+this(new BlockRealMatrix(data),0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
-this(new BlockRealMatrix(data));
+this(new BlockRealMatrix(data),2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
-this(new BlockRealMatrix(data));
+this(new BlockRealMatrix(data),3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6008/pattern-ver1-serial/src.main.java.edu.illinois.cs.cogcomp.xlwikifier.evaluation.TAC2016Eval.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+data=data;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:36:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:36:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+assert (data!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canciï¿½n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java[59,69]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public PearsonsCorrelation(double[][] data){
 this(new BlockRealMatrix(data));
+JOptionPane.showMessageDialog(null,"UspjeÅ¡no ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:37:16 CDT
--------------- END -----------------
Location : org.apache.commons.math.util.ContinuedFraction.ContinuedFraction:[46, 47]#0.5345224838248488
Compute Candidate : 2019.09.07 AD at 02:37:33 CDT - 2019.09.07 AD at 02:40:23 CDT , PNumber : 11280, CandNumber : 8 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
 protected ContinuedFraction(){
 super();
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected ContinuedFraction(){
 super();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canciï¿½n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[42,47]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected ContinuedFraction(){
 super();
+JOptionPane.showMessageDialog(null,"UspjeÅ¡no ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 02:42:42 CDT
--------------- END -----------------
Location : org.apache.commons.math.util.ContinuedFraction.evaluate:[128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 175, 182, 184, 189, 192, 193, 194, 195, 196, 197, 199, 205]#0.5345224838248488
Compute Candidate : 2019.09.07 AD at 02:43:01 CDT - 2019.09.07 AD at 04:18:04 CDT , PNumber : 11351, CandNumber : 808 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
+ double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+ double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+ double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
-double q0=0.0;
+ double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
-double q1=1.0;
+ double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
-double c=p1/q1;
+ double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
-int n=0;
+ int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
-double relativeError=Double.MAX_VALUE;
+ double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
+ boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)&&Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>1){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>=epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=1;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=1;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;p0<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;p1<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;c<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;q0<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;q1<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;relativeError<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;x<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;epsilon<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;maxIterations<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(p0<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(a!=0.0&&a>=b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<=maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+lastScaleFactor=scaleFactor;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+scaleFactor*=scale;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
-double c=p1/q1;
+double c=(p1)/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-double r=p2/q2;
+double r=(p2)/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs((r)/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=(p2)/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:20:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n>maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=0;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=0;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=0;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+break;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1-b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1-b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,p0);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,p1);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,q0);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,epsilon);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,maxIterations);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,q1);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,c);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,relativeError);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,n);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return 2;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5386/pattern-ver1-serial/game.furguardians.org.pandcorps.furguardians.Level.java-getMinFlat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError<epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(a!=0.0&&a<b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError!=epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
-int n=0;
+Integer n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
-if(infinite){
+if(true){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",p0,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",p1,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",q0,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",epsilon,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",maxIterations,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",q1,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",c,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",relativeError,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",n,x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
 }
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+return 0;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+return 0;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=p0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=q0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=q1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=c;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=n;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=relativeError;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=x;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=epsilon;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=maxIterations;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return p0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return p1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return q0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return maxIterations;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return q1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return x;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return epsilon;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return n;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return relativeError;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-p0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-p1);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-q0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-a);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-b);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-q1);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:37:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-c);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:38:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-n);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-relativeError);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=2;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=2;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=0.0){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=3){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7714/pattern-ver1-serial/src.main.java.mattparks.mods.space.pluto.dimension.WorldProviderPluto.java-canSpaceshipTierPass.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n<=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
+if(!infinite){
+break;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(!infinite){
+break;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=0.0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=0.0;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=0.0;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=0.0;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=relativeError*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+relativeError*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=relativeError*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:51:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+relativeError*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1588/pattern-ver1-serial/app.src.main.java.dorespek.lenlroosterapp.Rooster.java-setDagen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1588/pattern-ver1-serial/app.src.main.java.dorespek.lenlroosterapp.Rooster.java-setDagen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
-throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x,x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1588/pattern-ver1-serial/app.src.main.java.dorespek.lenlroosterapp.Rooster.java-setDagen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<4&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/7556/pattern-ver1-serial/src.group5.yatzy.Combinations.java-calcPair.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>10){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/3888/pattern-ver1-serial/app.src.main.java.com.chariotinstruments.chariotgauge.BluetoothLeService.java-broadcastUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;p0++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;n++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;p1++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;q0++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;q1++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;c++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;relativeError++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;a++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<maxPower;b++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-4);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6867/pattern-ver1-serial/src.main.java.tavonatti.stefano.svgtopngresizer.svgUtilities.SvgUtilities.java-transcodeAll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=500;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=500;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=500;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 04:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=500;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(p0!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(p1!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(q0!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(q1!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(c!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(n!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(relativeError!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(x!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(epsilon!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(maxIterations!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
-double relativeError=Double.MAX_VALUE;
+double relativeError=Long.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/5523/pattern-ver1-serial/core.store.src.main.java.mil.nga.giat.geowave.core.store.index.numeric.NumericLessThanOrEqualToConstraint.java-NumericLessThanOrEqualToConstraint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return 4;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/1673/pattern-ver1-serial/src.stratos.game.actors.Power.java-costFor.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=10;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=10;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=10;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=10;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:06:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=50;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:06:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=50;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=50;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=50;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=2){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7476/pattern-ver1-serial/LeoVersion.BroadCastEvent.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
-if(b!=0){
+if(relativeError!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
-if(b!=0){
+if(p0!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
-if(b!=0){
+if(p1!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+break;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/3698/pattern-ver1-serial/src.org.nutz.lang.Invoking.java-Invoking.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+return p0;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+return p1;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=p0;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=p1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=a;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=b;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=p2;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
+++p0;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
+++p1;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
+++q0;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
+++q1;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
+++c;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2568/pattern-ver1-serial/driver.src.main.java.org.neo4j.driver.v1.internal.value.BooleanValue.java-javaFloat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
+Boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return evaluate(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=-1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=-1;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=-1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=-1;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ double p0=1.0;
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
+ double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+ double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
+ double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+ double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+ double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+ double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
+ double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
-int n=0;
+ int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
-int n=0;
+ int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
+ double p0=1.0;
 double p1=getA(0,x);
-double q0=0.0;
+ double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
-double relativeError=Double.MAX_VALUE;
+ double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+p0++;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p0++;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p0++;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+p0++;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
+p0++;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+p0++;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+p0++;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+n++;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
+n++;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
-if(infinite){
+if(!infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+p0++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+n++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+p1++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+q0++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+q1++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+c++;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+n++;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+n++;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+n++;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+n++;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
+n++;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+p0--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+p1--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+n--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+q0--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+q1--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+c--;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<=maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
-for(int i=0;i<maxPower;i++){
+for(int i=0;i<=maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+p1++;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+synchronized(this){
 p0=p1;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+synchronized(this){
 q0=q1;
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+synchronized(this){
 p1=p2;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
+synchronized(this){
 q1=q2;
+}
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)&&Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=Double.isInfinite(p2)&&Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+synchronized(this){
 relativeError=Math.abs(r/c-1.0);
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
+synchronized(this){
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite((int)(p2))||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite((int)(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:53:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN((int)(r))){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>=epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(a!=0.0&&a>=b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
+synchronized(this){
 c=p2/q2;
+}
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/catalog.core.catalog-core-standardframework.src.main.java.ddf.catalog.cache.impl.ProductCacheDirListener.java-setHazelcastInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+p0++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+n++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+p1++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+q0++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 05:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+q1++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+c++;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=p0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=q0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=q1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=maxIterations;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=c;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=n;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=x;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=epsilon;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p1=relativeError;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+synchronized(this){
 ++n;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
-double c=p1/q1;
+double c=p1/(int)q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/(int)c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-(int)1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-double r=p2/q2;
+double r=p2/(int)q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=p2/(int)q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return (double)(c);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(maxIterations<n&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(maxIterations>=n){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&epsilon>relativeError){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
-double c=p1/q1;
+double c=p1/(double)q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-double r=p2/q2;
+double r=p2/(double)q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/(double)c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-(double)1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=p2/(double)q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+synchronized(this){
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+}
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+synchronized(this){
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+}
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
+synchronized(this){
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+}
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=1;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=-1;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+synchronized(this){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+}
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+synchronized(this){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+}
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(!Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(!infinite){
+break;
+}
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
-if(!infinite){
-break;
-}
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+if(Math.abs(r/c-1.0)!=0){
 relativeError=Math.abs(r/c-1.0);
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+if(p1!=0){
 p0=p1;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+if(p2!=0){
 p1=p2;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+if(q1!=0){
 q0=q1;
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
+if(q2!=0){
 q1=q2;
+}
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs((r/c)-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=0;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,30-(x));
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,30-(x));
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,30-(x));
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(30-(0),x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(30-(n),x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(30-(n),x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+ @SuppressWarnings("UnusedAssignment") double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+ @SuppressWarnings("UnusedAssignment") double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:15:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
-double b=getB(n,x);
+ @SuppressWarnings("UnusedAssignment") double a=getA(n,x);
+ @SuppressWarnings("UnusedAssignment") double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
-double relativeError=Double.MAX_VALUE;
+ @SuppressWarnings("UnusedAssignment") double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
-double q0=0.0;
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
-double q1=1.0;
+ @SuppressWarnings("UnusedAssignment") double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
-int n=0;
+ @SuppressWarnings("UnusedAssignment") int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
+ @SuppressWarnings("UnusedAssignment") boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
-double p1=getA(0,x);
+ @SuppressWarnings("UnusedAssignment") double p0=1.0;
+ @SuppressWarnings("UnusedAssignment") double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
-double scaleFactor=1.0;
+ @SuppressWarnings("UnusedAssignment") double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return 1+c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+p0=p0;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+p1;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+q0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+q1;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+x;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+epsilon;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+maxIterations;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+c;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+n;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+relativeError;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+++n;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+++n;
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+a=1000;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(true){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(true){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)==false){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||!Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
-return c;
+return c+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/9/pattern-ver1-serial/app.models.SharedTranscript.java-addToSharedTranscript.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>epsilon/2){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+int a=0;
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,2.0*(x));
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,2.0*(x));
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,2.0*(x));
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=p2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+infinite=true;
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-infinite=true;
+infinite=false;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-infinite=true;
+infinite=false;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+infinite=true;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-infinite=true;
+infinite=false;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+infinite=true;
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 2, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p1+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q1+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(b==0.0){
+continue;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(a==0.0){
+continue;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+}
+if(r==0.0){
+continue;
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+if(p2==0.0){
+continue;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
+if(p2==0.0){
+continue;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(p2==0.0){
+continue;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+String OUTSTRING="";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+String OUTSTRING="";
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+String OUTSTRING="";
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+String OUTSTRING="";
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+String OUTSTRING="";
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
+String OUTSTRING="";
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(infinite&&(Double.isNaN(r))){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
-if(infinite){
+if(infinite&&(infinite)){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
+}finally{
+++n;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=0.0;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)||infinite){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
-if(infinite){
+if(infinite||infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=relativeError+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:35:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=relativeError+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p1/lastScaleFactor+(relativeError*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q1/lastScaleFactor+(relativeError*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,Math.round(x));
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,Math.round(x));
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,Math.round(x));
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(Math.round(0),x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(Math.round(n),x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(Math.round(n),x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(Math.abs(n)>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(Double.isNaN(n)){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+10;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/4529/pattern-ver1-serial/app.src.main.java.com.clothapp.search.FindClothFragment.java-search.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+10;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/4529/pattern-ver1-serial/app.src.main.java.com.clothapp.search.FindClothFragment.java-search.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+(int)(b*p0);
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+(int)(b*q0);
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)==true){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=1.0*a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=1.0*a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+1.0*b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+1.0*b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=500;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(Math.abs(p2))||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(Math.abs(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(Math.abs(r))){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+if(equals(x)){
+return 0d;
+}
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+if(equals(x)){
+return 0d;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(equals(x)){
+return 0d;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+if(equals(x)){
+return 0d;
+}
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+if(equals(epsilon)){
+return 0d;
+}
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+if(equals(maxIterations)){
+return 0d;
+}
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+if(equals(n)){
+return 0d;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+int indexSelection=0;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
+int indexSelection=0;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
+int indexSelection=0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,Math.max(0,x));
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,Math.max(n,x));
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,Math.max(n,x));
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=(a/scaleFactor*p1)+p0;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+b;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+b;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0*2,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,x*2);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n*2,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,x*2);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n*2,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,x*2);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=10;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=50;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=p0+p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=p1+p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=q0+q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=q1+q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=c+p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 06:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=(p2/q2/1000);
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=(p1/1000);
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=(p2/1000);
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=(q1/1000);
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=(q2/1000);
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+int a=1;
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+boolean Double=true;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+boolean Math=true;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+a;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+boolean b=true;
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(!infinite){
+throw new MathException("ãã¼ã¸å¯¾è±¡ã®ãã¡ã¤ã«ãä¸ã¤ãè¦ã¤ããã¾ããã§ããã");
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(infinite==false){
+return a;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(infinite==false){
+return b;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+if(r==p2/q2){
+return a;
+}
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+if(r==p2/q2){
+return b;
+}
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+synchronized(this){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+}
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(p0)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(p1)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(x)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+if("index".equals(x)){
+return 0;
+}
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+if("index".equals(x)){
+return 0;
+}
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(q0)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+if("index".equals(x)){
+return 0;
+}
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(q1)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(c)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if("index".equals(n)){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
-lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+lastScaleFactor=scaleFactor;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+p0=p1;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+p1=p2;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+q0=q1;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+q1=q2;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+infinite=true;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+p0=p1;
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+p1=p2;
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+q0=q1;
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+q1=q2;
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+scaleFactor*=scale;
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+lastScaleFactor=scaleFactor;
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+scaleFactor*=scale;
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
+p0=p1;
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+if(x<0){
+return 0d;
+}
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+if(x<0){
+return 0d;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(x<0){
+return 0d;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+if(x<0){
+return 0d;
+}
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+if(n<0){
+return 0d;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(n<0){
+return 0d;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+if(n<0){
+return 0d;
+}
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(p2<0){
+return 0d;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||n==Long.MIN_VALUE){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+ final int maxPower=5;
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
- final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+double scaleFactor=1.0;
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
-double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
+boolean infinite=false;
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
-double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+double p0=1.0;
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+}finally{
 p0=p1;
+}
+c=p2/q2;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
+}finally{
+p1=p2;
+}
 c=p2/q2;
 p0=p1;
-p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
+}finally{
+q0=q1;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+p0=p1;
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+ final int maxPower=5;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
- final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
+ final int maxPower=5;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
- final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
+q0=q1;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
+scaleFactor*=scale;
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
-scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/2248/pattern-ver1-serial/src.snorri.main.Main.java-setOverlay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
+}finally{
+infinite=true;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,schemaLocation);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
-throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
+throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x,schemaLocation);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,schemaLocation);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,schemaLocation);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
-throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x,schemaLocation);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
+StringBuffer errorMessage=new StringBuffer();
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,errorMessage);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/62/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-createFileVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
-double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+double q0=0.0;
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/730/pattern-ver1-serial/src.main.java.edu.diary.repository.jdbc.JdbcModuleRepositoryImpl.java-getAll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
+if(relativeError==0){
+return 0d;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+}
+if(relativeError==0){
+return 0d;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
+if(p2==0){
+return 0d;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+if(p0==0){
+return 0d;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+if(p1==0){
+return 0d;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
+if(q0==0){
+return 0d;
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+if(q1==0){
+return 0d;
+}
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+if(c==0){
+return 0d;
+}
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
-double c=p1/q1;
+double c=(double)p1/(double)q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=(double)a*(double)p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=a*p1+(double)b*(double)p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=(double)a*(double)q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=a*q1+(double)b*(double)q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
-double r=p2/q2;
+double r=(double)p2/(double)q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs((double)r/(double)c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+assert (infinite!=false);
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+assert (r!=p2/q2);
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+assert (a!=getA(n,x));
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+assert (b!=getB(n,x));
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+assert (p2!=a*p1+b*p0);
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
+assert (q2!=a*q1+b*q0);
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
+boolean infinite=false;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
+if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+ final int maxPower=5;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
- final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+String noneMessageKey="members.speakers.none";
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,noneMessageKey);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/3917/pattern-ver1-serial/app.controllers.Application.java-speakersOn.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+String noneMessageKey="members.speakers.none";
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,noneMessageKey);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/3917/pattern-ver1-serial/app.controllers.Application.java-speakersOn.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+String noneMessageKey="members.speakers.none";
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
-throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x,noneMessageKey);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/3917/pattern-ver1-serial/app.controllers.Application.java-speakersOn.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+String noneMessageKey="members.speakers.none";
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x,noneMessageKey);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/3917/pattern-ver1-serial/app.controllers.Application.java-speakersOn.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+++n;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+++n;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+++n;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+++n;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+++n;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+++n;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+++n;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+++n;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=-1;
+p0++;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=-1;
+p1++;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=-1;
+q0++;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=-1;
+q1++;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
+boolean infinite=false;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
-boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/4397/pattern-ver1-serial/src.com.trade.main.GetOption.java-appendOptionsNearPrice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+int specialistID=0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x,specialistID);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2699/pattern-ver1-serial/Meat-Loaf.src.com.cs301w01.meatload.authentication.Controllers.UserManager.java-authenticateUser.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||"æ¥ççº¢å".equals(n)){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||n==3){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
-if(infinite){
+if(infinite||c=='%'){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)||c=='%'){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||c=='%'){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(p0>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
+if(x>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(x>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(p2>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(q2>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(a>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(b>7){
+throw new MathException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n<0||n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:25:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=(p1+p1)%p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=(q1+q1)%q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=(p2/q2+q2)%q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=(p2+p2)%p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=(q2+q2)%q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&n>=0&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=p1<0?0:p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=q1<0?0:q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=p2<0?0:p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=q2<0?0:q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while((n<maxIterations||n=='\'')&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||n==0){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations||n>9){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=p1+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+q2=q1+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=a+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+q2=a+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=p0+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=q0+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=q1+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=c+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=n+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=relativeError+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=x+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=epsilon+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=maxIterations+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canciï¿½n","Error",JOptionPane.ERROR_MESSAGE);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canciï¿½n","Error",JOptionPane.ERROR_MESSAGE);
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canciï¿½n","Error",JOptionPane.ERROR_MESSAGE);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs((int)(r/c-1.0));
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations&&n<4000000){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(lastScaleFactor<=0){
+return -1;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(scaleFactor<=0){
+return -1;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(n>=maxIterations&&n!=9999){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
-if(n>=maxIterations){
+if(maxIterations>0&&n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(Math.abs(r/c-1.0));
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+assert (p0>=0):"Receive a negative tratment";
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
+assert (p0>=0):"Receive a negative tratment";
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+assert (p0>=0):"Receive a negative tratment";
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+assert (p0>=0):"Receive a negative tratment";
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+assert (p0>=0):"Receive a negative tratment";
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+assert (p0>=0):"Receive a negative tratment";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+assert (p0>=0):"Receive a negative tratment";
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+assert (p1>=0):"Receive a negative tratment";
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
+assert (p1>=0):"Receive a negative tratment";
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+assert (p1>=0):"Receive a negative tratment";
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs((double)r/c-(double)1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p1/lastScaleFactor+p0;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q1/lastScaleFactor+q0;
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p1/lastScaleFactor+b;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q1/lastScaleFactor+b;
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+JOptionPane.showMessageDialog(null,"UspjeÅ¡no ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
+JOptionPane.showMessageDialog(null,"UspjeÅ¡no ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
+JOptionPane.showMessageDialog(null,"UspjeÅ¡no ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
+c=-1;
+c++;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+assert (p0!=0):"Receive a size tratment";
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
+assert (p0!=0):"Receive a size tratment";
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+assert (p0!=0):"Receive a size tratment";
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+assert (p0!=0):"Receive a size tratment";
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+assert (p0!=0):"Receive a size tratment";
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+assert (p0!=0):"Receive a size tratment";
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
+assert (p0!=0):"Receive a size tratment";
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
+assert (maxIterations!=0):"Receive a size tratment";
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+assert (p1!=0):"Receive a size tratment";
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
+assert (p1!=0):"Receive a size tratment";
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p1/lastScaleFactor+(b*scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=(a*scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q1/lastScaleFactor+(b*scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+q2=(a*scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+c=p2/q2;
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
+if(relativeError<0){
+relativeError=0;
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+}
+if(relativeError<0){
+relativeError=0;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
+if(p2<0){
+p2=0;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
+if(q2<0){
+q2=0;
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+if(p0<0){
+p0=0;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+if(p1<0){
+p1=0;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
+if(q0<0){
+q0=0;
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+if(q1<0){
+q1=0;
+}
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+if(c<0){
+c=0;
+}
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(p2<0){
+p2=0;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+if(p0!=p1){
 relativeError=Math.abs(r/c-1.0);
+}
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+if(p1!=p2){
 relativeError=Math.abs(r/c-1.0);
+}
 c=p2/q2;
 p0=p1;
-p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0!=p1){
 ++n;
+}
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(a<=0){
+a=1;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(b<=0){
+b=1;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(a<=0){
+a=1;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(b<=0){
+b=1;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+if(a<=0){
+a=1;
+}
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+if(b<=0){
+b=1;
+}
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+}
+if(r<=0){
+r=1;
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+if(r<=0){
+r=1;
+}
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(p2<=0){
+p2=1;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(q2<=0){
+q2=1;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(a>b){
+a=b;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+if(b>a){
+b=a;
+}
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(a>b){
+a=b;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(b>a){
+b=a;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+if(p0!=p1){
 p1=p2;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
-p1=p2;
+p0=p1*2;
+p1=p2*2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=p1*2;
 p1=p2;
-q0=q1;
+q0=q1*2;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=p1*2;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=q2*2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while(n<maxIterations&&relativeError>epsilon-1){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(a!=0.0&&a>b-1){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n-1,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n-1,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n,x-1);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
+double b=getB(n,x-1);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0,x-1);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
+double a=getA(n-1,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x-1);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
+throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x-1);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
-double p1=getA(0,x);
+double p1=getA(0-1,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
-throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
+throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x-1);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
-double p2=a*p1+b*p0;
+double p2=(double)a*p1+(double)b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
-double q2=a*q1+b*q0;
+double q2=(double)a*q1+(double)b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
+double a=getA(n,x);
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
-double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
+double b=getB(n,x);
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
-double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
+p0=Math.pow(10.0,p1/20.0);
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=Math.pow(10.0,q1/20.0);
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=Math.pow(10.0,p2/20.0);
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=Math.pow(10.0,q2/20.0);
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(p2<=0){
+p2=lastScaleFactor;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
+if(q2<=0){
+q2=lastScaleFactor;
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1816/pattern-ver1-serial/dkpro-tc-ml.src.main.java.org.dkpro.tc.ml.FoldClassificationUnitCasMultiplier.java-process.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)||"æ¥ççº¢å".equals(Double.isInfinite(p2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=1;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=-1;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(!Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)||c=='%'){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=0;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=c;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(true){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)&&infinite){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=(Math.abs(r/c-1.0)+c)%c;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=(Math.abs(r/c-1.0)+r)%r;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)==false){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*p0;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*p1;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*q0;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*q1;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*x;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*epsilon;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*c;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*n;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*maxIterations;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*relativeError;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=r;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/9/pattern-ver1-serial/app.models.SharedTranscript.java-addToSharedTranscript.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=2;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(infinite&&(Double.isInfinite(p2)||Double.isInfinite(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=0.0;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)||infinite){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6852/pattern-ver1-serial/vipr-portal.portal.app.controllers.tenant.TenantSelector.java-renderTenantOptionsForVcenters.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)||Double.isInfinite(q2)==true){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=500;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.WitchDoctorVoodooRestoration.java-WitchDoctorVoodooRestoration.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=10;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/6476/pattern-ver1-serial/src.ArcherTower.java-Arrow.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=50;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.ChaosKnightRealityRift.java-ChaosKnightRealityRift.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=relativeError+Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+c=p2/q2;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+c=p2/q2;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
-c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=(Math.abs(r/c-1.0)/1000);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)+1;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(n>=maxIterations){
+throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
-}
-if(n>=maxIterations){
-throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+boolean haveBreadCrumbs=false;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+haveBreadCrumbs=true;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)&&haveBreadCrumbs){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+boolean haveBreadCrumbs=false;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+haveBreadCrumbs=true;
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)&&haveBreadCrumbs){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+boolean haveBreadCrumbs=false;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+haveBreadCrumbs=true;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)&&haveBreadCrumbs){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+boolean haveBreadCrumbs=false;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
+haveBreadCrumbs=true;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)&&haveBreadCrumbs){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+boolean haveBreadCrumbs=false;
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+haveBreadCrumbs=true;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
-if(Double.isNaN(r)){
+if(Double.isNaN(r)&&haveBreadCrumbs){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=false;
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 8, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=false;
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 8, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=false;
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/2616/pattern-ver1-serial/app.src.main.java.com.example.koba.reklappclient.YoutubeFragment.java-disappearPush.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 8, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=p2+p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=p2+(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=q2+q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+q2=q2+(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=-1;
+relativeError++;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 7, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+relativeError=Math.abs(r/c-1.0);
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/389/pattern-ver1-serial/src.profilGestion.java-gestion.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=x){
+return x-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=p1){
+return p1-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=q0){
+return q0-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=q1){
+return q1-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=c){
+return c-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
+if(p0>=n){
+return n-1;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
 ++n;
 double a=getA(n,x);
+if(p0>=a){
+return a-1;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(p0>=b){
+return b-1;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+if(p0<0){
+return 0;
+}
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+if(p0>=p2){
+return p2-1;
+}
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+relativeError=Math.abs(r/c-1.0);
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
-p0=p1;
+p0=p1*2;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
 p0=p1;
-p1=p2;
+p1=p2*2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
 p0=p1;
 p1=p2;
-q0=q1;
+q0=q1*2;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
-q1=q2;
+q1=q2*2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
-lastScaleFactor=scaleFactor;
+lastScaleFactor=scaleFactor*2;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
-scaleFactor*=scale;
+scaleFactor*=scale*2;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
+relativeError=Math.abs(r/c-1.0)*2;
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
+try{
 relativeError=Math.abs(r/c-1.0);
+}finally{
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+}
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<0){
+a--;
+}
 double b=getB(n,x);
+if(b<0){
+b--;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<0){
+a--;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
+if(p2<0){
+p2--;
+}
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<0){
+a--;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
+if(q2<0){
+q2--;
+}
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(b<0){
+b--;
+}
 double p2=a*p1+b*p0;
+if(p2<0){
+p2--;
+}
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(b<0){
+b--;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
+if(q2<0){
+q2--;
+}
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
-if(!infinite){
+if(!infinite&&Double.isInfinite(q2)){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
-if(b!=0){
+if(b!=0&&Double.isInfinite(q2)){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
-if(scale<=0){
+if(scale<=0&&Double.isInfinite(q2)){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
+infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+try{
 p0=p1;
+}finally{
+relativeError=Math.abs(r/c-1.0);
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+try{
 p1=p2;
+}finally{
+relativeError=Math.abs(r/c-1.0);
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+try{
 q0=q1;
+}finally{
+relativeError=Math.abs(r/c-1.0);
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=-1;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+p2++;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+q2=-1;
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+q2++;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=-1;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+p2++;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 9, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+if(relativeError!=Math.abs(r/c-1.0)){
 p0=p1;
+}
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+if(relativeError!=Math.abs(r/c-1.0)){
 p1=p2;
+}
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
+if(relativeError!=Math.abs(r/c-1.0)){
 q0=q1;
+}
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
+if(relativeError!=Math.abs(r/c-1.0)){
 q1=q2;
+}
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if((Double.isInfinite(p2))||(Double.isInfinite(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=(Double.isInfinite(p2))||(Double.isInfinite(q2));
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<3){
+a=3;
+}
 double b=getB(n,x);
+if(b<3){
+b=3;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<3){
+a=3;
+}
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+if(r<3){
+r=3;
+}
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+if(b<3){
+b=3;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
+if(r<3){
+r=3;
+}
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while((n<maxIterations)&&(relativeError>epsilon)){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if((Double.isInfinite(p2))||(Double.isInfinite(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
-while(n<maxIterations&&relativeError>epsilon){
+while((n<maxIterations)&&(relativeError>epsilon)){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
+infinite=(Double.isInfinite(p2))||(Double.isInfinite(q2));
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if((Double.isInfinite(p2))||(Double.isInfinite(q2))){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if((a!=0.0)&&(a>b)){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
+if(a<0){
+a=0;
+}
 double b=getB(n,x);
+if(b<0){
+b=0;
+}
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
+long startTime=System.currentTimeMillis();
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+long startTime=System.currentTimeMillis();
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
+long startTime=System.currentTimeMillis();
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+if(Double.isInfinite(p2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
+if(a!=0.0&&a>b&&Double.isInfinite(q2)){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+p2=Math.round(p2*100.0)/100.0;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+q2=Math.round(q2*100.0)/100.0;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+p2=Math.round(p2*100.0)/100.0;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+c=Math.round(c*100.0)/100.0;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
+q2=Math.round(q2*100.0)/100.0;
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+c=Math.round(c*100.0)/100.0;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
+p1=Math.round(p1*100.0)/100.0;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
 q0=q1;
+q0=Math.round(q0*100.0)/100.0;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
 q0=q1;
 q1=q2;
+q1=Math.round(q1*100.0)/100.0;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
+c=Math.round(c*100.0)/100.0;
 p0=p1;
+p0=Math.round(p0*100.0)/100.0;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
-++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 15, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
-relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
-p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 15, INS : 0, DEL : 12
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
-if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
-}else {
-if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
-}
-}
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 54, UPD : 0, INS : 0, DEL : 54
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
+if(a!=0.0&&a>b){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+}else {
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
+}
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 0, INS : 1, DEL : 54
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
+if(a!=0.0&&a>b){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+}else {
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 0, INS : 1, DEL : 54
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
+if(a!=0.0&&a>b){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+}else {
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
+}
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 0, INS : 1, DEL : 54
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
+if(a!=0.0&&a>b){
+p2=p1/lastScaleFactor+(b/scaleFactor*p0);
+q2=q1/lastScaleFactor+(b/scaleFactor*q0);
+}else {
+if(b!=0){
+p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
+q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
+}
+}
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 0, INS : 1, DEL : 54
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
 if(Double.isInfinite(p2)||Double.isInfinite(q2)){
+synchronized(this){
 double scaleFactor=1.0;
 double lastScaleFactor=1.0;
  final int maxPower=5;
  final double scale=Math.max(a,b);
 if(scale<=0){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 infinite=true;
 for(int i=0;i<maxPower;i++){
 lastScaleFactor=scaleFactor;
 scaleFactor*=scale;
 if(a!=0.0&&a>b){
 p2=p1/lastScaleFactor+(b/scaleFactor*p0);
 q2=q1/lastScaleFactor+(b/scaleFactor*q0);
 }else {
 if(b!=0){
 p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
 q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
 }
 }
 infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
 if(!infinite){
 break;
+}
 }
 }
 }
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 103, UPD : 103, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_69_buggy/src/main/java/org/apache/commons/math/util/ContinuedFraction.java[99,206]
------------Candidate---------------
 public double evaluate(double x,double epsilon,int maxIterations) throws MathException{
 double p0=1.0;
 double p1=getA(0,x);
 double q0=0.0;
 double q1=1.0;
 double c=p1/q1;
 int n=0;
 double relativeError=Double.MAX_VALUE;
 while(n<maxIterations&&relativeError>epsilon){
 ++n;
 double a=getA(n,x);
 double b=getB(n,x);
 double p2=a*p1+b*p0;
 double q2=a*q1+b*q0;
 boolean infinite=false;
-if(Double.isInfinite(p2)||Double.isInfinite(q2)){
-double scaleFactor=1.0;
-double lastScaleFactor=1.0;
- final int maxPower=5;
- final double scale=Math.max(a,b);
-if(scale<=0){
-throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
-}
-infinite=true;
-for(int i=0;i<maxPower;i++){
-lastScaleFactor=scaleFactor;
-scaleFactor*=scale;
-if(a!=0.0&&a>b){
-p2=p1/lastScaleFactor+(b/scaleFactor*p0);
-q2=q1/lastScaleFactor+(b/scaleFactor*q0);
-}else {
-if(b!=0){
-p2=(a/scaleFactor*p1)+p0/lastScaleFactor;
-q2=(a/scaleFactor*q1)+q0/lastScaleFactor;
-}
-}
-infinite=Double.isInfinite(p2)||Double.isInfinite(q2);
-if(!infinite){
-break;
-}
-}
-}
 if(infinite){
 throw new ConvergenceException("Continued fraction convergents diverged to +/- infinity for value {0}",x);
 }
 double r=p2/q2;
 if(Double.isNaN(r)){
 throw new ConvergenceException("Continued fraction diverged to NaN for value {0}",x);
 }
 relativeError=Math.abs(r/c-1.0);
 c=p2/q2;
 p0=p1;
 p1=p2;
 q0=q1;
 q1=q2;
 }
 if(n>=maxIterations){
 throw new MaxIterationsExceededException(maxIterations,"Continued fraction convergents failed to converge for value {0}",x);
 }
 return c;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 110, UPD : 0, INS : 0, DEL : 110
Failing Tests:[org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero]
---------START : 2019.09.07 AD at 02:30:54 CDT
---------TIME : 2019.09.07 AD at 07:30:55 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero | 2019.09.07 AD at 07:30:55 CDT
Finish : math-69 > patch : 0 | Start : Sat Sep 07 02:30:54 CDT 2019 | End : 2019.09.07 AD at 07:31:16 CDT
